Script started on Thu 05 Apr 2018 02:14:00 PM EDT
igc2@kernighan:~/workspace/214/labs/08/java$ ls
Makefile  Name.java  NameTester.java  script.java
igc2@kernighan:~/workspace/214/labs/08/java$ cat Name.java NameTester.java Name    MakeFi  file
/* Name.java implements class Name
 * Begun by: Prof. Adams, for CS 214 at Calvin College
 * Student: Ian Graham Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

// the Name class appears outside of the rest of the program
class Name {

  // Name object constructor with initialization  
  public Name(final String first, final String middle, final String last) {
      myFirst = first;
      myMiddle = middle;
      myLast = last;
  }
 
  // extractor for first name of a Name object
  public final String getFirst() {
      return myFirst;
  }

  // extractor for middle name of a Name object
  public final String getMiddle() {
      return myMiddle;
  }

  // extractor for last name of a Name object
  public final String getLast() {
      return myLast;
  }
  
  // return string created by piecing together first, middle, and last names
  public final String toString() {
      return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  private String myFirst, myMiddle, myLast;  // private instance variables
}
/* NameTester.java is a 'driver' to test class Name
 * Begun by: Prof. Adams, for CS 214 at Calvin College
 * Student: Ian Graham Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");
      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;
      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");
      System.out.println("All tests passed!");
  }
}
NameTester: Name.class NameTester.class

Name.class: Name.java
	javac -deprecation Name.java

NameTester.class: NameTester.java
	javac -deprecation NameTester.java

clean:
	rm -f *.class *~ *# *.o
igc2@kernighan:~/workspace/214/labs/08/java$ make
javac -deprecation Name.java
javac -deprecation NameTester.java
igc2@kernighan:~/workspace/214/labs/08/java$ java NameTester
John Paul Jones
All tests passed!
igc2@kernighan:~/workspace/214/labs/08/java$ make clean
rm -f *.class *~ *# *.o
igc2@kernighan:~/workspace/214/labs/08/java$ ls
Makefile  Name.java  NameTester.java  script.java
igc2@kernighan:~/workspace/214/labs/08/java$ exit

Script done on Thu 05 Apr 2018 02:14:46 PM EDT
Script started on Fri 06 Apr 2018 09:34:52 AM EDT
igc2@taylor:~/workspace/214/labs/08/ada$ ls
Makefile  name_package.adb  name_package.ads  name_tester.adb  script.ada
igc2@taylor:~/workspace/214/labs/08/ada$ make
gcc -c -gnata name_tester.adb
gcc -c -gnata name_package.adb
gnatbind name_tester.ali
gnatlink name_tester.ali
igc2@taylor:~/workspace/214/labs/08/ada$ cat name. _tester.adb name_package.adb name_package.ads
-- name_tester.adb "test-drives" the Name type
-- Begun by: Dr. Adams, CPSC 280, October 1999
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO, name_package;
use  Ada.Text_IO, name_package;

procedure name_tester is
  aName : name_package.Name;
begin
  name_package.Init(aName, "John    ", "Paul    ", "Jones   ");
  pragma Assert(getFirst(aName) = "John    ", "getFirst() failed");
  pragma Assert(getMiddle(aName) = "Paul    ", "getMiddle() failed");
  pragma Assert(getLast(aName) = "Jones   ", "getLast() failed");
  pragma Assert(getFullName(aName) = "John     Paul     Jones   ", "getFullName() failed");
  Put(aName); New_line;
  Put("All tests passed!"); New_line;
end name_tester;
-- name_package.adb defines operations for the Name type
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO;
use  Ada.Text_IO;

package body name_package is

  -- Procedure: Init initializes a Name variable
  -- Parameters: Nm, the Name variable; First, the first name;
  --          Middle, the middle name; Last, the last name
  -- Return: Nm, its fields set to First, Middle, and Last
  procedure Init(Nm: out Name; First, Middle, Last : in String) is
  begin
    Nm.MyFirst := First;
    Nm.MyMiddle := Middle;
    Nm.MyLast := Last;
  end Init;

  -- getFirst(Name) retrieves Name.myFirst
  -- Parameters: Nm, a Name
  -- Precondition: Nm has been initialized
  -- Return: Nm.myFirst
  function getFirst(Nm: in Name) return String is
  begin
    return Nm.MyFirst;
  end getFirst;

  -- Function: getMiddle(Name) retrieves Name as a String
  -- Parameters: Nm, a Name
  -- Precondition: Nm has been initialized
  -- Return: Nm.myMiddle
  function getMiddle(Nm: in Name) return String is
  begin
     return Nm.MyMiddle;
  end getMiddle;

  -- Function: getLast(Name) retrieves Name.myLast
  -- Parameters: Nm, a Name
  -- Precondition: Nm has been initialized
  -- Return: Nm.myLast
  function getLast(Nm: in Name) return String is
  begin
     return Nm.MyLast;
  end getLast;

  -- Function: getFullName(Name) retrieves Name as a String
  -- Parameters: Nm, a Name
  -- Precondition: Nm has been initialized
  -- Return: a String rePreconditionsentation of Nm
  function getFullName(Nm: in Name) return String is
  begin
    return Nm.MyFirst & " " & Nm.MyMiddle & " " & Nm.MyLast;
  end getFullName;

  -- Procedure: Put(Name) displays a Name value
  -- Precondition: Nm has been initialized
  -- Parameters: Nm, a Name
  -- Returns: Nm, to the screen
  procedure Put(Nm: in Name) is
  begin
    Put(getFullName(Nm) );
  end Put;

end name_package;
-- name_package.ads declares the Name type and its operations
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

package Name_Package is
	type Name is private;
	procedure Init(Nm: out Name; First, Middle, Last : in String);
	function getFirst(Nm: in Name) return String;
	function getMiddle(Nm: in Name) return String;
	function getLast(Nm: in Name) return String;
	function getFullName(Nm: in Name) return String;
	procedure Put(Nm: in Name);

	private
	NAME_SIZE : constant Positive := 8;
  	type Name is record
		MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);
	end record;
	aName : Name;

end Name_Package;
igc2@taylor:~/workspace/214/labs/08/ada$ ls
Makefile  name_package.adb  name_package.ads  name_package.ali	name_package.o	name_tester  name_tester.adb  name_tester.ali  name_tester.o  script.ada
igc2@taylor:~/workspace/214/labs/08/ada$ ./name_tester
John     Paul     Jones   
All tests passed!
igc2@taylor:~/workspace/214/labs/08/ada$ make clean
rm -f name_tester *~ *# *.o *.ali *.c
igc2@taylor:~/workspace/214/labs/08/ada$ ls
Makefile  name_package.adb  name_package.ads  name_tester.adb  script.ada
igc2@taylor:~/workspace/214/labs/08/ada$ exit

Script done on Fri 06 Apr 2018 09:35:45 AM EDT
NAMETESTER.EL FILE:
;;; nameTester.el simulates and tests an e-LISP Name type
;;; Begun by: Dr. Adams, CS 214 at Calvin College
;;; Completed by: Ian Christensen, CS 214 at Calvin College
;;; Date: Spring, 2018

(setq load-path (cons "." load-path))

("." "/usr/share/emacs24/site-lisp/a2ps" "/etc/emacs24" "/etc/emacs" "/usr/local/share/emacs/24.5/site-lisp" "/usr/local/share/emacs/site-lisp" "/usr/share/emacs24/site-lisp/erlang" "/usr/share/emacs24/site-lisp/dictionaries-common" "/usr/share/emacs24/site-lisp/cmake-data" "/usr/share/emacs/site-lisp/autoconf" "/usr/share/emacs/24.5/site-lisp" "/usr/share/emacs/24.5/site-lisp/a2ps" ...)

(load "/home/igc2/workspace/214/labs/08/e-lisp/Name.el")

t

"A simple driver for our Name functions"
(progn
  (require 'cl)
  (setq aName (Name "John" "Paul" "Jones"))
  (assert (equal (getFirst aName) "John"))
  (assert (equal (getMiddle aName) "Paul"))
  (assert (equal (getLast aName) "Jones"))
  (assert (equal (getFullName aName) "John Paul Jones"))
  (setq buf (get-buffer "nameTester.el"))
  (assert (eq (printName aName buf) aName) )
  (terpri buf)
  (princ "All tests passed!" buf)
  (terpri buf)
)

John Paul Jones
All tests passed!
t


NAME.EL FILE:
;;; Name.el simulates an e-LISP Name type and operations on that type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College
;;; Completed by: Ian Christensen, CS 214 at Calvin College
;;; Date: Spring, 2018

"Name constructs a name from three strings
 Receive: first, middle and last, three strings
 Return: the triplet (first middle last)"
(defun Name(first middle last)
  (list first middle last)
)

"getFirst extracts the first name of a name object
 Receive: theName, a Name
 Return: the first string in theName"
(defun getFirst(theName)
  (car theName)
)

"getMiddle extracts the middle name of a name object
 Receive: theName, a Name
 Return: the second string in theName"
(defun getMiddle(theName)
  (car (cdr theName)) 
)

"getLast extracts the last name of a name object
 Receive: theName, a Name
 Return: the third string in theName"
(defun getLast(theName)
  (car (cdr (cdr theName)))
)

"getFullName returns a full name in F-M-L order
 Return: myFirst, myMiddle, myLast"
(defun getFullName (theName)
   (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName))
)

"printName displays a name object
 Receive: theName, a Name, buffer, the name of a buffer
 Output: the strings in theName to buffer"
(defun printName (theName buf)
   (princ (getFullName theName) buf)
   theName
)
Script started on Thu 05 Apr 2018 02:43:22 PM EDT
igc2@kernighan:~/workspace/214/labs/08/ruby$ cat     ls
Name.rb  nameTester.rb  script.ruby
igc2@kernighan:~/workspace/214/labs/08/ruby$ cat Name.rb R NameT     nameTester.rb
#!/usr/bin/ruby
# name.rb implements class Name
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

module Names
  class Name

    def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
    end

    attr_reader :first, :middle, :last

    def fullName
      @first + " " + @middle + " " + @last
    end

    def print
      puts fullName
      fullName
    end
  end
end
#!/usr/bin/ruby
# nameTester.rb tests class Name and its operations
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require 'test/unit/assertions'
include Test::Unit::Assertions

require '/home/igc2/workspace/214/labs/08/ruby/Name.rb'
# require 'Name.rb'
# load 'Name.rb'

if __FILE__ == $0
   name = Names::Name.new("John", "Paul", "Jones")

   assert name.first == "John", 
           "first failed"
   assert name.middle == "Paul",
           "middle failed"
   assert name.last == "Jones",
           "last failed"
   assert name.fullName == "John Paul Jones",
           "fullName failed"
   assert name.print == "John Paul Jones",
           "print failed"
   
   print "All tests passed!\n"
end
igc2@kernighan:~/workspace/214/labs/08/ruby$ ruby nameTester.rb
John Paul Jones
All tests passed!
igc2@kernighan:~/workspace/214/labs/08/ruby$ exit

Script done on Thu 05 Apr 2018 02:43:52 PM EDT
