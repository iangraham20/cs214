Script started on Sat 14 Apr 2018 08:34:36 PM EDT
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ ls
Bird.java  Birds.java  Duck.java  Goose.java  Makefile	Owl.java  script.java
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ cat B Birds.java Bird.java Duck. java Goose.java Owl.java Makefuk  ile
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

public class Birds {
  
  public static void main(String[] args) {
    System.out.println("\nWelcome to the Bird Park!\n");

    Bird bird0 = new Bird();

    Bird bird1 = new Bird("Hawkeye");
    bird1.print();

    Duck bird2 = new Duck("Donald");
    bird2.print();

    Goose bird3 = new Goose("Mother Goose");
    bird3.print();

    Owl bird4 = new Owl("Woodsey");
    bird4.print();
    System.out.println();
    }
}

/* Bird.java provides a Bird class
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College
 * Completed by: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

import java.io.*;

public class Bird {
 /* default constructor
  * PostCond: myName == "".
  */
  public Bird() {
    myName = "";
  } 


 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Bird(String name) {
    myName = name;
  } 

 /* Name accessor
  * Return: myName.
  */
  public String getName() {
    return myName;
  } 

 /* A Bird's Call
  * Return: a default bird-call ("Squawk!").
  */
  public String call() {
    return "Squaaaaaaaaaawk!";
  } 

 /* Output a Bird 
  * Output: Everything known about myself
  *          to the standard output stream.
  */
  public void print() {
    System.out.println(getName() + ' ' + getClass().getName() + " says " + call());
  }

  private String myName;
}

/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

public class Duck extends Bird {
    
	/* explicit constructor
	 * Receive: name, a String 
	 * PostCond: myName == name.
	 */
	public Duck() {
		super();
	}

	public Duck(String name) {     
		super(name);
	} 

	/* A Duck's Call
	 * Return: a duck-call ("Quack!").
	 */
	public String call() {
		return "Quack!";
	} 
}
/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

public class Goose extends Bird {

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
 public Goose() {
 	super();
 }

 public Goose(String name) {
 	super(name);
 }


 /* A Goose's Call
  * Return: a goose-call ("Honk!").
  */
	public String call() {
		return "Honk!";
	} 
}
/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

public class Owl extends Bird {

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
 public Owl() {
 	super();
 }

 public Owl(String name) {
 	super(name);
 }

 /* An Owl's Call
  * Return: an owl-call ("Whoo-hoo!").
  */
 public String call() {
 	return "Whoo-hoo!";
 }
} 


Birds: Birds.java
	javac -deprecation Birds.java

clean:
	rm -f *.class *.o *~ *#

igc2@eckert-mauchly:~/workspace/214/labs/10/java$ make
javac -deprecation Birds.java
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ ls
Bird.class  Birds.class  Duck.class  Goose.class  Makefile   Owl.java
Bird.java   Birds.java	 Duck.java   Goose.java   Owl.class  script.java
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ java Birds

Welcome to the Bird Park!

Hawkeye Bird says Squaaaaaaaaaawk!
Donald Duck says Quack!
Mother Goose Goose says Honk!
Woodsey Owl says Whoo-hoo!

igc2@eckert-mauchly:~/workspace/214/labs/10/java$ make clean
rm -f *.class *.o *~ *#
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ ls
Bird.java  Birds.java  Duck.java  Goose.java  Makefile	Owl.java  script.java
igc2@eckert-mauchly:~/workspace/214/labs/10/java$ exit

Script done on Sat 14 Apr 2018 08:35:27 PM EDT
Script started on Sat 14 Apr 2018 09:39:15 PM EDT
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ ls
bird_package.adb  duck_package.adb   goose_package.ads	owl_package.ads
bird_package.ads  duck_package.ads   Makefile		script.ada
birds.adb	  goose_package.adb  owl_package.adb
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ cat bird_     Makefile brid   ior  rds.adb bird_package.adb s bird_pa ckage.adb b duck_package.da  ads duck  _package.adb goods  se_package.ads p goose_package.adb owl_package.ads  G [A[Aigc2@eckert-mauchly:~/workspace/214/labs/10/ada$ cat Makefile birds.adb bird_package.ads bird_pac
[Kowl_package.adb
# Makefile for GNAT (Ada) compilation
#  for a 2-level class hierarchy

TARGET = birds
SUBPACKAGES = duck_package.ali goose_package.ali owl_package.ali
PACKAGES = bird_package.ali $(SUBPACKAGES)

CC     = gcc
CFLAGS = -c 

.SUFFIXES:
.SUFFIXES: .adb .ads                  # ada package body & spec.

$(TARGET): $(TARGET).ali $(PACKAGES)  # link target & packages
	$(BIN)gnatbind $(TARGET).ali
	$(BIN)gnatlink $(TARGET).ali

$(TARGET).ali: $(TARGET).adb          # compile target (w/o .ads)
	$(CC) $(CFLAGS) $<

%.ali : %.adb %.ads                   # compile packages (w .ads)
	$(CC) $(CFLAGS) $<

$(SUBPACKAGES) : bird_package.ads     # subclasses depend on superclass

clean:
	/bin/rm -f $(TARGET) *~ *.o *.ali *.c *#


-- birds.adb tests our Birds type hierarchy.
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Bird_Package, Duck_Package, Goose_Package, Owl_Package, Ada.Text_IO;
use Bird_Package, Duck_Package, Goose_Package, Owl_Package, Ada.Text_IO;

procedure Birds is
	Bird1 : Bird_Type;  -- base class
	Bird2 : Duck_Type;  -- derived class 1
	Bird3 : Goose_Type; -- derived class 2
	Bird4 : Owl_Type;   -- derived class 3
begin
	New_Line; Put("Welcome to the Bird Park!"); New_Line;
	Init(Bird1, "Tweety");
	Put(Bird1); New_Line;

	Init(Bird2, "Donald");
	Put(Bird2); New_Line;

	Init(Bird3, "Mother");
	Put(Bird3); New_Line;

	Init(Bird4, "Woodsy");
	Put(Bird4); New_Line; New_Line;
end Birds;

-- bird_package.ads gives Bird-related declarations
-- Begun by: Dr. Adams, for CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

package Bird_Package is
	type Bird_Type is tagged private;

	 -- initialization
	 -- Receive: A_Bird, a Bird_Type; Name, a String
	 -- Return: a Bird_Type whose My_Name = Name
	 procedure Init(A_Bird : out Bird_Type; Name : in String);

	 -- Name accessor
	 -- Receive: A_Bird, a Bird_Type
	 -- Return: A_Bird.My_Name
	 function  Name(A_Bird : in Bird_Type) return String;

	 -- A Bird's Call
	 -- Receive: A_Bird, a Bird_Type
	 -- Return: a default bird-call ("Squawk!")
	 function  Call(A_Bird : in Bird_Type) return String;

	 -- Determine type of a Bird (for derived types)
	 -- Receive: A_Bird, a Bird_Type
	 -- Return: "Bird"
	 function  Type_Name(A_Bird : in Bird_Type) return String;

	 -- Output a Bird
	 -- Receive: A_Bird, a Bird or subclass of Bird
	 -- Output: Everything known about A_Bird
	 procedure Put(A_Bird : in Bird_Type'Class);
	 
	private
		type Bird_Type is
			tagged record
				My_Name : String(1..6);
			end record;
end Bird_Package;
-- bird_package.adb gives Bird-related definitions
-- Begun by: Dr. Adams, for CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is
	-- initialization
	-- Receive: A_Bird, a Bird_Type; Name, a String
	-- Return: a Bird_Type in which My_Name = Name
	procedure Init(A_Bird : out Bird_Type; Name : in String) is
	begin
		A_Bird.My_Name := Name;
	end Init;

	-- Name accessor
	-- Receive: A_Bird, a Bird_Type
	-- Return: A_Bird.My_Name
	function Name(A_Bird : in Bird_Type) return String is
	begin
		return A_Bird.My_Name;
	end Name;

	-- A Bird's Call
	-- Receive: A_Bird, a Bird_Type
	-- Return: a default bird-call ("Squawk!")
	function Call(A_Bird : in Bird_Type) return String is
	begin
		return "Squawwwwwwk!";
	end Call;

	-- Determine type of a Bird (for derived types)
	-- Receive: A_Bird, a Bird_Type
	-- Return: "Bird"
	function Type_Name(A_Bird : in Bird_Type) return String is
	begin
		return "Bird";
	end Type_Name;

	-- Output a Bird
	-- Receive: A_Bird, a Bird or subclass of Bird
	-- Output: Everything known about A_Bird
	procedure Put(A_Bird : in Bird_Type'Class) is
	begin
		Put( Name(A_Bird) );
		Put( ' ' );
		Put( Type_Name(A_Bird) );
		Put( " says " );
		Put( Call(A_Bird) );
	end Put; 
end Bird_Package;
-- duck_package.ads gives Duck-related declarations and derives Duck from Bird
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Bird_Package;
use Bird_Package;

package Duck_Package is
	type Duck_Type is new Bird_Type with private;

	-- A Duck's Call (Over-rides Bird.Call())
	-- Receive: A_Duck, a Duck_Type
	-- Return: "Quack!"
	function  Call(A_Duck : in Duck_Type) return String;

	-- Determine type of a Duck (Over-rides Bird.Type_Name())
	-- Receive: A_Duck, a Duck_Type
	-- Return: "Duck"
	function  Type_Name(A_Duck : in Duck_Type) return String;

	private
		type Duck_Type is new Bird_Type with
			record
				null;
			end record;
end Duck_Package;
-- duck_package.adb gives Duck-related definitions by over-riding Bird-related definitions
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is
	-- A Duck's Call (Over-rides Bird.Call())
	-- Receive: A_Duck, a Duck_Type
	-- Return: "Quack!"
	function Call(A_Duck : in Duck_Type) return String is
	begin
		return "Quack!";
	end Call;

	-- Determine type of a Duck (Over-rides Bird.Type_Name())
	-- Receive: A_Duck, a Duck_Type
	-- Return: "Duck"
	function Type_Name(A_Duck : in Duck_Type) return String is
	begin
		return "Duck";
	end Type_Name;
end Duck_Package;
-- goose_package.ads gives Goose-related declarations, and derives Goose from Bird
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Bird_Package;
use Bird_Package;

package Goose_Package is
	type Goose_Type is new Bird_Type with private;

	-- A Goose's Call (Over-rides Bird.Call())
	-- Receive: A_Goose, a Goose
	-- Return: "Honk!"
	function  Call(A_Goose : in Goose_Type) return String;

	-- Determine type of a Goose
	-- (Over-rides Bird.Type_Name())
	-- Receive: A_Goose, a Goose
	-- Return: "Goose"
	function  Type_Name(A_Goose : in Goose_Type) return String;

	private
		type Goose_Type is new Bird_Type with
			record
				null;
			end record;
end Goose_Package;
-- goose_package.adb gives Goose-related definitions by over-riding Bird-related definitions
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

package body Goose_Package is
	-- A Goose's Call (Over-rides Bird.Call())
	-- Receive: A_Goose, a Goose_Type
	-- Return: "Honk!"
	function Call(A_Goose : in Goose_Type) return String is
	begin
		return "Honk!";
	end Call;

	-- Determine type of a Goose
	-- (Over-rides Bird.Type_Name())
	-- Receive: A_Goose, a Goose_Type
	-- Return: "Goose"
	function Type_Name(A_Goose : in Goose_Type) return String is
	begin
		return "Goose";
	end Type_Name;
end Goose_Package;
-- owl_package.ads gives Owl-related declarations, and derives Owl from Bird
-- Begun by: Dr. Adams, for CS 214 at Calvin College
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Bird_Package;
use Bird_Package;

package Owl_Package is
	type Owl_Type is new Bird_Type with private;
	-- A Owl's Call (Over-rides Bird.Call())
	-- Receive: An_Owl, an Owl_Type
	-- Return: "Whoo!"
	function  Call(An_Owl : in Owl_Type) return String;

	-- Determine type of a Owl
	-- (Over-rides Bird.Type_Name())
	-- Receive: An_Owl, an Owl_Type
	-- Return: "Owl"
	function  Type_Name(An_Owl : in Owl_Type) return String;

	private
		type Owl_Type is new Bird_Type with
			record
				null;
			end record;
end Owl_Package;
-- owl_package.adb gives Owl-related definitions by over-riding Bird-related definitions.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is
	-- A Owl's Call (Over-rides Bird.Call())
	-- Receive: An_Owl, an Owl_Type
	-- Return: "Whoo!"
	function Call(An_Owl : in Owl_Type) return String is
	begin
		return "Whoo!";
	end Call;

	-- Determine type of a Owl
	-- (Over-rides Bird.Type_Name())
	-- Receive: An_Owl, an Owl_Type
	-- Return: "Owl"
	function Type_Name(An_Owl : in Owl_Type) return String is
	begin
		return "Owl";
	end Type_Name;
end Owl_Package;
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ ls
bird_package.adb  duck_package.adb   goose_package.ads	owl_package.ads
bird_package.ads  duck_package.ads   Makefile		script.ada
birds.adb	  goose_package.adb  owl_package.adb
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ make
gcc -c  birds.adb
gcc -c  bird_package.adb
gcc -c  duck_package.adb
gcc -c  goose_package.adb
gcc -c  owl_package.adb
gnatbind birds.ali
gnatlink birds.ali
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ ls
bird_package.adb  birds.adb	    duck_package.ali   goose_package.o	owl_package.o
bird_package.ads  birds.ali	    duck_package.o     Makefile		script.ada
bird_package.ali  birds.o	    goose_package.adb  owl_package.adb
bird_package.o	  duck_package.adb  goose_package.ads  owl_package.ads
birds		  duck_package.ads  goose_package.ali  owl_package.ali
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ ./birds

Welcome to the Bird Park!
Tweety Bird says Squawwwwwwk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsy Owl says Whoo!

igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ make clean
/bin/rm -f birds *~ *.o *.ali *.c *#
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ ls
bird_package.adb  duck_package.adb   goose_package.ads	owl_package.ads
bird_package.ads  duck_package.ads   Makefile		script.ada
birds.adb	  goose_package.adb  owl_package.adb
igc2@eckert-mauchly:~/workspace/214/labs/10/ada$ exit

Script done on Sat 14 Apr 2018 09:41:05 PM EDT
;;; lambda.el explores the lambda, apply, and funcall functions
;;; Author: Ian Christensen, for CS 214 at Calvin College
;;; Date: Spring, 2018

; PART 1:

(lambda (x) (+ x x))
; output: (lambda (x) (+ x x))
; returned itself because lambda creates a function from the given values

((lambda (x) (+ x x)) 17)
; output: 34
; returned the output that results from inputting 17 as the parameter x and then adding x to itself in the term "(+ x x)"

; EXERCISE 1A:

((lambda (w x y z) (max (abs w) (abs x) (abs y) (abs z))) -0.5 1 -10 -5.3)

10.0

; EXERCISE 1B:

((lambda (x y z) (+ x y z)) 1 2 3)
6

((lambda (x) (null x)) nil)
t

((lambda () 17.2))
17.2

; PART 2:

; (setq double (function (lambda (x) (+ x x))))
; first example before abbreviating

(setq double '(lambda (x) (+ x x)))
(lambda (x) (+ x x))

; (double 11) this failed because double is not the definition of the function

(funcall double 11)      ; should produce 22
22 ; good it returned 22

(setq triple '(lambda (x) (* x 3))) ; define triple
(lambda (x) (* x 3)) ; registering the function worked

(funcall triple 11) ; calling triple should produce 33
33 ;good it returned 33

(apply '+ '(1 2 3))    ; should return 6
6

(apply '+ 1 2 '(3 4 5)) ;valid
15

(apply '+ 1 '(3 4 5) 2) ;invalid
; eval: Wrong type argument: listp, 2

(funcall '+ 1 2 3 4)
10

(funcall 'cons 'a '(b))
(a b)

(mapcar 'evenp '(1 2 3 4))
(mapcar 'oddp '(1 2 3 4))
(mapcar 'abs '(-1 2 -3 4 -5))
(1 2 3 4 5)

(defun subtract-n (n list)
    (mapcar '(lambda (x) (- x n)) list))
subtract-n

(subtract-n 2 '(2 4 6))
(0 2 4)

; EXERCISE 2:

(defun sum-squares (alist)
  (apply '+ (mapcar '(lambda (x) (* x x)) alist)))

sum-squares


(sum-squares '(1 2 3))          ; should return 14
14

(sum-squares '(1 2 3 4 5))      ; should return 55
55

(sum-squares '(-1 -2 -3 0 1))   ; should return 15 
15
Script started on Sat 14 Apr 2018 09:31:49 PM EDT
igc2@eckert-mauchly:~/workspace/214/labs/10/ruby$ ls
Bird.rb  Birds.rb  Duck.rb  Goose.rb  Owl.rb  script.ruby
igc2@eckert-mauchly:~/workspace/214/labs/10/ruby$ cat Bird.rb Birds.rb Duck.rb Gouse   ps  ose.rb Owl.rb
#!/usr/bin/ruby
# Bird.rb Defines a Bird superclass to be extended by specific bird sub-classes
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

class Bird

	# Method: accessor for name attribute
	attr_reader :name

	# Method: initialize, constructor for Bird
	# Precondition: a name parameter is given
	# Receives: name, a string
	# Returns: a Bird object
	def initialize(name)
		@name = name
	end

	# Method: call, accessor for a Bird call
	# Precondition: Bird must exist
	# Receives: a Bird object
	# Returns: 'Squaaaaaaawk!', the generic bird call
	def call
		'Squaaaaaaawk!'
	end

	# Method: className, accessor for the class name
	# Precondition: Bird must exist
	# Receives: a Bird object
	# Returns: self.class.to_s, the Bird object's class
	def className
		self.class.to_s
	end

	# Method: print, output operation for Bird object
	# Precondition: Bird must exist
	# Receives: a Bird object
	# Returns: outputs the Bird object's name, classname, and call
	def print
		puts name + className + " says " + call
	end
end
#!/usr/bin/ruby
# birds.rb Tests out the menagerie of bird classes.
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'

if __FILE__ == $0
	puts "\nWelcome to the Bird Park!\n\n"

	bird0 = Bird.new "Hawkeye"
	bird0.print

	bird1 = Duck.new "Donald"
	bird1.print

	bird2 = Goose.new "Mother"
	bird2.print

	bird3 = Owl.new "Woodsey"
	bird3.print

	puts "\n"
end
#!/usr/bin/ruby
# Owl.rb Defines the Owl class which inherits attributes and methods from the Bird superclass.
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require './Bird.rb'

class Duck < Bird

	# Method: call, accessor for a Duck call
	# Precondition: Duck must exist
	# Receives: a Duck object
	# Returns: 'Quack!', a duck call
	def call
		'Quack!'
	end
end
#!/usr/bin/ruby
# Owl.rb Defines the Owl class which inherits attributes and methods from the Bird superclass.
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require './Bird.rb'

class Goose < Bird

	# Method: call, accessor for a Goose call
	# Precondition: Goose must exist
	# Receives: a Goose object
	# Returns: 'Honk!', a goose call
	def call
		'Honk!'
	end
end
#!/usr/bin/ruby
# Owl.rb Defines the Owl class which inherits attributes and methods from the Bird superclass.
# Begun by: Dr. Adams, for CS 214 at Calvin College
# Completed by: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require './Bird.rb'

class Owl < Bird

	# Method: call, accessor for a Owl call
	# Precondition: Owl must exist
	# Receives: a Owl object
	# Returns: 'Whoo-hoo', a owl call
	def call
		'Whoo-hoo'
	end
end
igc2@eckert-mauchly:~/workspace/214/labs/10/ruby$ ls
Bird.rb  Birds.rb  Duck.rb  Goose.rb  Owl.rb  script.ruby
igc2@eckert-mauchly:~/workspace/214/labs/10/ruby$ ruby Birds.rb

Welcome to the Bird Park!

HawkeyeBird says Squaaaaaaawk!
DonaldDuck says Quack!
MotherGoose says Honk!
WoodseyOwl says Whoo-hoo

igc2@eckert-mauchly:~/workspace/214/labs/10/ruby$ exit

Script done on Sat 14 Apr 2018 09:32:30 PM EDT
