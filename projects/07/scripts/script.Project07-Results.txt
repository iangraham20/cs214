Script started on Wed 04 Apr 2018 02:47:14 PM EDT
igc2@vonneumann:~/workspace/214/projects/07$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name
 * Begun by: Prof. Adams, for CS 214 at Calvin College
 * Student: Ian Christensen, for CS 214 at Calvin College
 * Date: Spring, 2018
 */

import java.util.Scanner;

public class NameTester {

	/* Function: main, the main driver that tests class Name
	 * Parameter: args, an array of string arguments
	 * Precondition: file must be running
	 * Returns: text that confirms the tests have passed
	 */
	public static void main(String[] args) {
		Scanner keyboard = new Scanner(System.in);
		Name aName = new Name("John", "Paul", "Jones");
		assert aName.getFirst().equals("John");
		assert aName.getMiddle().equals("Paul");
		assert aName.getLast().equals("Jones");
		assert aName.toString().equals("John Paul Jones");
		assert aName.lfmiFormat().equals("Jones, John P.");
		System.out.println("\n" + aName);

		aName.setFirst("Joel");
		aName.setMiddle("Saul");
		aName.setLast("James");
		assert aName.getFirst().equals("Joel");
		assert aName.getMiddle().equals("Saul");
		assert aName.getLast().equals("James");
		System.out.println(aName);

		aName.newName(keyboard);
		System.out.println("You entered: " + aName);

		System.out.println("All tests passed!\n");
	}
}

class Name {

	// private initialization of Name attributes
	private String myFirst, myMiddle, myLast;

	// constructor methods for Name
	public Name(String first, String middle, String last) {
		myFirst = first;
		myMiddle = middle;
		myLast = last;
	}

	// Accessor methods for Name object
	public String getFirst() { return myFirst; }
	public String getMiddle() { return myMiddle; }
	public String getLast() { return myLast; }

	// Mutator methods for Name object
	public void setFirst(String aFirst) { myFirst = aFirst; }
	public void setMiddle(String aMiddle) { myMiddle = aMiddle; }
	public void setLast(String aLast) { myLast = aLast; }

	/* Procedure: toString, stringifies the Name object
	 * Precondition: myFirst, myMiddle, and myLast exist
	 * Returns: a stringified Name object
	 */
	public String toString() {
		return myFirst + ' ' + myMiddle + ' ' + myLast;
	}

	/* Procedure: lfmiFormat (lfmi), formats the Name object
	 * Precondition: myFirst, myMiddle, and myLast exist
	 * Returns: a formatted Name string
	 */
	public String lfmiFormat() {
		return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
	}

	/* Function: newName, allows the user to change the Name object
	 * Parameter: keyboard, Scanner object
	 * Precondition: Name object has been initialized
	 */
	public void newName(Scanner keyboard) {
		System.out.print("Enter the first name: ");
		myFirst = keyboard.nextLine();
		System.out.print("Enter the middle name: ");
		myMiddle = keyboard.nextLine();
		System.out.print("Enter the last name: ");
		myLast = keyboard.nextLine();
	}
};
igc2@vonneumann:~/workspace/214/projects/07$ make java
javac -deprecation NameTester.java
igc2@vonneumann:~/workspace/214/projects/07$ java -ea J NameTester

John Paul Jones
Joel Saul James
Enter the first name: Ian
Enter the middle name: Graham
Enter the last name: Christensen
You entered: Ian Graham Christensen
All tests passed!

igc2@vonneumann:~/workspace/214/projects/07$ exit

Script done on Wed 04 Apr 2018 02:47:53 PM EDT
Script started on Wed 04 Apr 2018 02:48:00 PM EDT
igc2@vonneumann:~/workspace/214/projects/07$ cat name_tester.adb
-- NameTester.adb tests class Name and its operations
-- Begun by: Prof. Adams, for CS 214 at Calvin College
-- Student: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO;
use  Ada.Text_IO;

procedure name_tester is

NAME_SIZE : constant Integer := 8;
Type Name is record
    MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);

end record;

MyString : String(1..NAME_SIZE);
MyLength : Natural;

aName : Name;

  -- Init initializes a Name variable
  -- Parameters: theName, the Name variable
  --          First, the first name
  --          Middle, the middle name,
  --          Last, the last name
  -- Return: theName, its fields set to First,
  --               Middle, and Last
  procedure Init(TheName: out Name; First, Middle, Last : in String) is
  begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  -- getFirst(Name) retrieves Name.myFirst
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myFirst
  function getFirst(TheName : in Name) return String is
  begin
    return TheName.MyFirst;
  end getFirst;

  -- getMiddle(Name) retrieves Name.myMiddle
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myMiddle
  function getMiddle(TheName : in Name) return String is
  begin
    return TheName.MyMiddle;
  end getMiddle;

  -- getLast(Name) retrieves Name.myLast
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myLast
  function getLast(TheName : in Name) return String is
  begin
    return TheName.MyLast;
  end getLast;

  -- setFirst(Name) sets Name.myFirst
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myFirst
  function setFirst(TheName : in out Name; First : in String) return String is
  begin
    TheName.MyFirst := First;
    return TheName.MyFirst;
  end setFirst;

  -- setMiddle(Name) sets Name.myMiddle
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myMiddle
  function setMiddle(TheName : in out Name; Middle : in String) return String is
  begin
    TheName.MyMiddle := Middle;
    return TheName.MyMiddle;
  end setMiddle;

  -- setLast(Name) sets Name.myLast
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: theName.myLast
  function setLast(TheName : in out Name; Last : in String) return String is
  begin
    TheName.MyLast := Last;
    return TheName.MyLast;
  end setLast;

  -- getFullName(Name) retrieves Name as a String
  -- Parameters: theName, a Name
  -- Precondition: theName has been initialized
  -- Return: a String representation of theName
  function getFullName(TheName : in Name) return String is
  begin
    return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
  end getFullName;

  -- Put(Name) displays a Name value
  -- Precondition: theName has been initialized
  -- Parameters: theName, a Name
  -- Output: theName, to the screen
  procedure Put(TheName : in Name) is
  begin
    Put(TheName.MyFirst);
    Put(TheName.MyMiddle);
    Put(TheName.MyLast);
  end Put;

  -- lfmiFormat(Name) retrieves Name as a formatted String
  -- Precondition: theName has been initialized
  -- Parameters: theName, a Name
  -- Output: a String representation of theName
  function lfmiFormat(TheName : in Name) return String is
  begin
    return TheName.MyLast & ", " & TheName.MyFirst & " " & TheName.MyMiddle(TheName.MyMiddle'First) & ".";
  end lfmiFormat;

  -- readName(Name) reads Name from user
  -- Precondition: theName has been initialized
  -- Parameters: theName, a Name
  procedure readName(TheName : in out Name) is
  begin
    Put("Enter the first name: ");
    Get_Line(MyString, MyLength);
    TheName.MyFirst := MyString;

    Put("Enter the middle name: ");
    Get_Line(MyString, MyLength);
    TheName.MyMiddle := MyString;

    Put("Enter the last name: ");
    Get_Line(MyString, MyLength);
    TheName.MyLast := MyString;
  end readName;

begin

  -- test constructor and getters
  Init(aName, "John    ", "Paul    ", "Jones   ");
  pragma Assert(getFirst(aName) = "John    ", "getFirst() failed");
  pragma Assert(getMiddle(aName) = "Paul    ", "getMiddle() failed");
  pragma Assert(getLast(aName) = "Jones   ", "getLast() failed");

  -- test fullname lfmi and print
  pragma Assert(getFullName(aName) = "John     Paul     Jones   ", "getFullName() failed");
  pragma Assert(lfmiFormat(aName) = "Jones   , John     P.");
  Put(aName); New_line;

  -- test setters and getters
  pragma Assert(setFirst(aName, "Jacob   ") = "Jacob   ", "setFirst() failed");
  pragma Assert(setMiddle(aName, "Scott   ") = "Scott   ", "setMiddle() failed");
  pragma Assert(setLast(aName, "Smith   ") = "Smith   ", "setLast() failed");

  -- test setters further through fullname lfmi and print
  pragma Assert(getFullName(aName) = "Jacob    Scott    Smith   ", "getFullName() failed");
  pragma Assert(lfmiFormat(aName) = "Smith   , Jacob    S.");
  Put(aName); New_line;

  -- test readname and printname
  readName(aName);
  Put(aName); New_line;

  Put("All tests passed!"); New_line;
end name_tester;
igc2@vonneumann:~/workspace/214/projects/07$ make a clean
rm -f *.class *.o *.ali *~ name_tester
igc2@vonneumann:~/workspace/214/projects/07$ make ada
gnatmake name_tester -gnata
gcc-5 -c -gnata name_tester.adb
gnatbind-5 -x name_tester.ali
gnatlink-5 name_tester.ali
igc2@vonneumann:~/workspace/214/projects/07$ ./name_tester
John    Paul    Jones   
Jacob   Scott   Smith   
Enter the first name: Ian
Enter the middle name: Grha  aham
Enter the last name: Christensen
Ianﬂ8  Graham  Christen
All tests passed!
igc2@vonneumann:~/workspace/214/projects/07$ exit

Script done on Wed 04 Apr 2018 02:48:41 PM EDT
;;; nameTester.el simulates and tests an e-LISP Name type.
;;; Begun by: Prof. Adams, for CS 214 at Calvin College
;;; Student: Ian Christensen, for CS 214 at Calvin College
;;; Date: Spring, 2018

" Name constructs a name from three strings
  Receive: first, middle and last, three strings
  Return: the triplet (forename middle surname) "
(defun Name (forename middle surname)
  (list forename middle surname)
)

Name

" getFirst extracts the first name of a name object
  Receive: theName, a Name
  Return: the first string in theName "
(defun getFirst (theName)
  (car theName)
)

getFirst

" getMiddle extracts the middle name of a name object
  Receive: theName, a Name
  Return: the second string in theName "
(defun getMiddle (theName)
  (car (cdr theName))
)

getMiddle

" getLast extracts the last name of a name object
  Receive: theName, a Name
  Return: the third string in theName "
(defun getLast (theName)
  (car (cdr (cdr theName)))
)

getLast

" setFirst sets the first name of a name object
  Receive: theName, a Name & forename, a string "
(defun setFirst (theName forename)
  (setcar theName forename)
)

setFirst

" setMiddle extracts the middle name of a name object
  Receive: theName, a Name & middle, a string "
(defun setMiddle (theName middle)
  (setcar (cdr theName) middle)
)

setMiddle

" setLast extracts the last name of a name object
  Receive: theName, a Name & surname, a string "
(defun setLast (theName surname)
  (setcar (cdr (cdr theName)) surname)
)

setLast

" getFullName returns a full name in F-M-L order
  Receive: theName, a Name
  Return: myFirst, myMiddle, myLast "
(defun getFullName (theName)
  (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName))
)

getFullName

" lfmiFormat returns a full name in L-F-M order
  Receive: theName, a Name
  Return: myFirst, myMiddle, myLast as a single string "
(defun lfmiFormat (theName)
  (concat (getLast theName) ", " (getFirst theName) " " (substring (getMiddle theName) 0 1) ".")
)

lfmiFormat

" printName displays a name object
  Receive: theName, a Name, 
           buffer, the name of a buffer
  Output: the strings in theName to buffer "
(defun printName (theName buffer)
  (princ theName buffer)
)

printName

"  newName receives user input to set a new name
   Receive: theName, a Name
   Output: the strings in theName to buffer "
(defun newName (theName)
  (setFirst theName (read-string "Enter the first name: "))
  (setMiddle theName (read-string "Enter the middle name: "))
  (setLast theName (read-string "Enter the last name: "))
)

newName

;;; A simple driver for our Name functions
(progn
  (require 'cl)
  (setq aName (Name "John" "Paul" "Jones"))
  (assert (equal (getFirst aName) "John" ))
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))
  (assert (equal (lfmiFormat aName) "Jones, John P."))
  (setq buf (get-buffer "nameTester.el"))
  (assert (eq (printName aName buf) aName))

  (setFirst aName "Joel")
  (setMiddle aName "Scott")
  (setLast aName "James")
  (assert (equal (getFirst aName) "Joel" ))
  (assert (equal (getMiddle aName) "Scott" ))
  (assert (equal (getLast aName) "James" ))
  (assert (equal (getFullName aName) "Joel Scott James" ))
  (assert (equal (lfmiFormat aName) "James, Joel S."))
  (setq buf (get-buffer "nameTester.el"))
  (assert (eq (printName aName buf) aName))

  (newName aName)
  (setq buf (get-buffer "nameTester.el"))
  (assert (eq (printName aName buf) aName))
  (terpri buf)
  (princ "All tests passed!" buf)
  (terpri buf)
)

(John Paul Jones)(Joel Scott James)(Ian Graham Christensen)
All tests passed!
t
Script started on Wed 04 Apr 2018 02:48:47 PM EDT
igc2@vonneumann:~/workspace/214/projects/07$ cat NameTester.b rb
# NameTester.rb tests class Name and its operations
# Begun by: Prof. Adams, for CS 214 at Calvin College
# Student: Ian Christensen, for CS 214 at Calvin College
# Date: Spring, 2018

require 'test/unit/assertions'
include Test::Unit::Assertions

class Name
	# Constructor for Name object
	def initialize(first, middle, last)
		@first, @middle, @last = first, middle, last
	end

	# Stringifies the Name object
	def fullName()
		@first + ' ' + @middle + ' ' + @last
	end

	# Formats the Name object as a string
	def lfmiFormat()
		@last + ', ' + @first + ' ' + @middle[0] + '.'
	end

	# Prints the stringified Name object
	def printName()
		puts fullName()
		fullName()
	end

	def readName()
		print "Enter the first name: "
		@first = gets.chomp
		print "Enter the middle name: "
		@middle = gets.chomp
		print "Enter the last name: "
		@last = gets.chomp
	end

	# Accessor and mutator methods for the Name object
	attr_accessor :first, :middle, :last
end

if __FILE__ == $0
	# test constructor and getters
	name = Name.new("John", "Paul", "Jones")
	assert name.first == "John", "first failed"
	assert name.middle == "Paul", "middle failed"
	assert name.last == "Jones", "last failed"

	# test fullname lfmi and print
	assert name.fullName == "John Paul Jones", "fullName failed"
	assert name.lfmiFormat == "Jones, John P.", "lfmiFormat failed"
	assert name.printName == "John Paul Jones", "print failed"

	# test setters and getters
	name.first = "Joel";
	name.middle = "Scott";
	name.last = "Smith";
	assert name.first == "Joel", "first failed"
	assert name.middle == "Scott", "middle failed"
	assert name.last == "Smith", "last failed"

	# test setters further through fullname lfmi and print
	assert name.fullName == "Joel Scott Smith", "fullName failed"
	assert name.lfmiFormat == "Smith, Joel S.", "lfmiFormat failed"
	assert name.printName == "Joel Scott Smith", "print failed"

	# test readname and printname
	name.readName
	name.printName
	
	print "All tests passed!\n"
end
igc2@vonneumann:~/workspace/214/projects/07$ ruby NameTester.rb
John Paul Jones
Joel Scott Smith
Enter the first name: Ian
Enter the middle name: Grh aham
Enter the last name: Christensen
Ian Graham Christensen
All tests passed!
igc2@vonneumann:~/workspace/214/projects/07$ exit

Script done on Wed 04 Apr 2018 02:49:15 PM EDT
