Script started on Mon 09 Apr 2018 08:08:17 PM EDT
igc2@noyce-kilby:~/workspace/214/projects/08/java$ ls
Makefile  script.java  Temp.java  Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ cat Temp.java Tester.java[1@M[1@a[1@k[1@e[1@f[1@i[1@l[1@e[1@ 
Tester: Temp.class Tester.class

Temp.class: Temp.java
	javac -deprecation Temp.java

Tester.class: Tester.java
	javac -deprecation Tester.java

clean:
	rm -f *.class *~ *# *.o
/* Temp.java implements class Temperature
 * Author: Ian Christensen, CS 214 at Calvin College
 * Date: Spring, 2018
 */

import java.util.Scanner;

class Temperature {

	/* Function: Temperature, constructor for Temperature object
	 * Parameters: degrees, a double; scale, a char
	 * Preconditions: the parameters must make a valid temperature
	 * Returns: a Temperature object
	 */
	public Temperature(final double degrees, final char scale) {
		validTemperature(degrees, scale);
		myDegrees = degrees;
		myScale = Character.toUpperCase(scale);
	}

	/* Function: getDegrees, accessor for degrees variable
	 * Parameters: Temperature object
	 * Preconditions: myDegrees is initialized as a double value
	 * Returns: myDegrees, a double
	 */
	public final double getDegrees() { 
		return myDegrees;
	}

	/* Function: getScale, accessor for degrees variable
	 * Parameters: Temperature object
	 * Preconditions: myScale is initialized as a char value
	 * Returns: myScale, a double
	 */
	public final char getScale() {
		return myScale;
	}

	/* Function: toCelsius, mutator for scale conversion
	 * Parameters: Temperature object
	 * Preconditions: myScale and myDegrees are initialized
	 * Returns: new Temperature object with myScale == 'C'
	 */
	public final Temperature toCelsius() {
		switch (myScale) {
			case 'C':
				return new Temperature(myDegrees, 'C');
			case 'F':
				return new Temperature((myDegrees - 32.0) * (5.0 / 9.0), 'C');
			case 'K':
				return new Temperature(myDegrees - 273.15, 'C');
		}
		return null;
	}

	/* Function: toFahrenheit, mutator for scale conversion
	 * Parameters: Temperature object
	 * Preconditions: myScale and myDegrees are initialized
	 * Returns: new Temperature object with myScale == 'F'
	 */
	public final Temperature toFahrenheit() {
		switch (myScale) {
			case 'C':
				return new Temperature(myDegrees * 1.8 + 32.0, 'F');
			case 'F':
				return new Temperature(myDegrees, 'F');
			case 'K':
				return new Temperature((myDegrees - 273.15) * 1.8 + 32.0, 'F');
		}
		return null;
	}

	/* Function: toKelvin, mutator for scale conversion
	 * Parameters: Temperature object
	 * Preconditions: myScale and myDegrees are initialized
	 * Returns: new Temperature object with myScale == 'K'
	 */
	public final Temperature toKelvin() {
		switch (myScale) {
			case 'C':
				return new Temperature(myDegrees + 273.15, 'K');
			case 'F':
				return new Temperature((myDegrees + 459.67) * 5.0 / 9.0, 'K');
			case 'K':
				return new Temperature(myDegrees, 'K');
		}
		return null;
	}

	/* Function: fromString, input for user strings
	 * Parameters: temperature_string, a string
	 * Preconditions: temperature_string is in format "0.0 C"
	 * Returns: new Temperature object
	 */
	public final static Temperature fromString(String temperature_string) {
		String[] temperature = temperature_string.split(" ");
		double degrees = Double.parseDouble(temperature[0]);
		char scale = temperature[1].charAt(0);
		return new Temperature(degrees, scale);
	}

	/* Function: toString, stringifies a Temperature object
	 * Parameters: Temperature Object
	 * Preconditions: myDegrees and myScale are initialized
	 * Returns: String format of a Temperature object
	 */
	public final String toString() {
		return String.format("%.2f %C", myDegrees, myScale);
	}

	/* Function: raise, mutator that increments a temperature's degree
	 * Parameters: raiseIncrement, a double
	 * Preconditions: the result cannot exceed the Planck Temperature
	 * Returns: new Temperature object with raised degree
	 */
	public final Temperature raise(final double raiseIncrement) {
		return new Temperature(myDegrees + raiseIncrement, myScale);
	}

	/* Function: lower, mutator that decrements a temperature's degree
	 * Parameters: lowerIncrement, a double
	 * Preconditions: the result cannot deceed absolute zero
	 * Returns: new Temperature object with lowered degree
	 */
	public final Temperature lower(final double lowerIncrement) {
		return new Temperature(myDegrees - lowerIncrement, myScale);
	}

	/* Function: equalTo, equality operator for temperature regardless of scale
	 * Parameters: otherTemperature, a Temperature object
	 * Preconditions: otherTemperature is a valid Temperature object
	 * Returns: true if equal, false if not equal
	 */
	public final boolean equalTo(final Temperature otherTemperature) {
		switch (myScale) {
			case 'C':
				return myDegrees == otherTemperature.toCelsius().getDegrees();
			case 'F':
				return myDegrees == otherTemperature.toFahrenheit().getDegrees();
			case 'K':
				return myDegrees == otherTemperature.toKelvin().getDegrees();
		}
		return false;
	}

	/* Function: lessThan, less than operator for temperature regardless of scale
	 * Parameters: otherTemperature, a Temperature object
	 * Preconditions: otherTemperature is a valid Temperature object
	 * Returns: true if less than, false if not less than
	 */
	public final boolean lessThan(final Temperature otherTemperature) {
		switch (myScale) {
			case 'C':
				return myDegrees < otherTemperature.toCelsius().getDegrees();
			case 'F':
				return myDegrees < otherTemperature.toFahrenheit().getDegrees();
			case 'K':
				return myDegrees < otherTemperature.toKelvin().getDegrees();
		}
		return false;
	}

	/* Function: validTemperature, assesses whether the degree and scale are valid
	 * Parameters: degrees, a double; scale, a char
	 * Preconditions: degrees and scale exist
	 * Returns: true, if a valid temperature
	 */
	public final boolean validTemperature(final double degrees, final char scale) {
		try {
			switch (scale) {
				case 'C':
					if (degrees > -273.15 && degrees < 141683385000000005000000000000273.15)
						return true;
					else
						throw new Exception("Degree must be between absolute zero and the Planck temperature");
				case 'F':
					if (degrees > -459.67 && degrees < 255030093000000008999999999999540.33)
						return true;
					else
						throw new Exception("Degree must be between absolute zero and the Planck temperature");
				case 'K':
					if (degrees > 0.0 && degrees < 141683385000000005000000000000000.0)
						return true;
					else
						throw new Exception("Degree must be between absolute zero and the Planck temperature");
				default:
					throw new Exception("Scale must be Celsius, Fahrenheit, or Kelvin (i.e. C, F, K)");
			}
		} catch (Exception ex) { 
			System.out.println("Invalid temperature:" + ex.getMessage());
		}
		return false;
	}

	// private declaration of variables
	private double myDegrees;
	private char myScale;
}
/* Tester.java implements class Temperature
 * Author: Ian Christensen, CS 214 at Calvin College
 * Date: Spring, 2018
 */

import java.util.Scanner;
import java.text.DecimalFormat;

public class Tester {

	/* Function: main, acts as a driver for Temperature class
	 * Parameters: String[] args, a list of strings
	 * Preconditions: file is running
	 * Returns: results of runTests and outputTable
	 */
	public static void main(String[] args) {
		runTests();
		outputTable();
	}

	public static void outputTable() {
		Scanner keyboard = new Scanner(System.in);
		System.out.print("Enter the base temperature: ");
		String baseStr = keyboard.nextLine();
		System.out.print("Enter the limit temperature: ");
		String limitStr = keyboard.nextLine();
		System.out.print("Enter the step value: ");
		double step = keyboard.nextDouble();
		Temperature base = Temperature.fromString(baseStr);
		Temperature limit = Temperature.fromString(limitStr);

		int i = 0;
		System.out.println("Celsius   |   Fahrenheit   |   Kelvin");
		while (base.lessThan(limit)) {
			System.out.println(base.toCelsius() + "   |   " + base.toFahrenheit() + "   |   " + base.toKelvin());
			base = base.raise(step);
			i++;
		}
	}

	public static void runTests() {
		DecimalFormat truncate = new DecimalFormat("#.##");

		// constructor
		System.out.print("Testing Constructor... ");
		Temperature aTemp = new Temperature(25.0, 'C');
		assert truncate.format(aTemp.getDegrees()).equals("25");
		assert aTemp.getScale() == 'C';
		System.out.print("Passed!\n");

		// toCelsius
		System.out.print("Testing toCelsius... ");
		aTemp = aTemp.toCelsius();
		assert truncate.format(aTemp.getDegrees()).equals("25");
		assert aTemp.getScale() == 'C';
		System.out.print("Passed!\n");

		// toFahrenheit
		System.out.print("Testing toFahrenheit... ");
		aTemp = aTemp.toFahrenheit();
		assert truncate.format(aTemp.getDegrees()).equals("77");
		assert aTemp.getScale() == 'F';
		System.out.print("Passed!\n");

		// toKelvin
		System.out.print("Testing toKelvin... ");
		aTemp = aTemp.toKelvin();
		assert truncate.format(aTemp.getDegrees()).equals("298.15");
		assert aTemp.getScale() == 'K';
		System.out.print("Passed!\n");

		// fromString
		System.out.print("Testing fromString... ");
		aTemp = aTemp.fromString("86 F");
		assert truncate.format(aTemp.getDegrees()).equals("86");
		assert aTemp.getScale() == 'F';
		System.out.print("Passed!\n");

		// toString
		System.out.println("Testing toString... \tExpected Output: 86 F\tOutput: " + aTemp);

		// raise
		System.out.print("Testing raise... ");
		aTemp = aTemp.raise(10.0);
		assert truncate.format(aTemp.getDegrees()).equals("96");
		assert aTemp.getScale() == 'F';
		System.out.print("Passed!\n");

		// lower
		System.out.print("Testing lower... ");
		aTemp = aTemp.lower(10.0);
		assert truncate.format(aTemp.getDegrees()).equals("86");
		assert aTemp.getScale() == 'F';
		System.out.print("Passed!\n");

		// equalTo
		System.out.print("Testing equalTo... ");
		Temperature aTemp2 = aTemp.toCelsius();
		assert aTemp.equalTo(aTemp2);
		aTemp2 = aTemp2.raise(10.0);
		assert !(aTemp.equalTo(aTemp2));
		System.out.print("Passed!\n");

		// lessThan
		System.out.print("Testing lessThan... ");
		assert aTemp.lessThan(aTemp2);
		aTemp2 = aTemp2.lower(10.0);
		assert !(aTemp.lessThan(aTemp2));
		System.out.print("Passed!\n");

		// validTemperature
		System.out.print("Testing validTemperature... (should throw three errors) \n");
		assert aTemp.validTemperature(10.0, 'F');
		assert aTemp.validTemperature(10.0, 'J') == false;
		assert aTemp.validTemperature(-100.0, 'K') == false;
		assert aTemp.validTemperature(151683385000000005000000000000000.0, 'K') == false;
		System.out.println("Passed!\n");

		System.out.println("Passed All Tests!\n");
	}
}
igc2@noyce-kilby:~/workspace/214/projects/08/java$ ls
Makefile  script.java  Temp.java  Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ make
javac -deprecation Temp.java
javac -deprecation Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ ls
Makefile  script.java  Temperature.class  Temp.java  Tester.class  Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ java -ea Tester
Testing Constructor... Passed!
Testing toCelsius... Passed!
Testing toFahrenheit... Passed!
Testing toKelvin... Passed!
Testing fromString... Passed!
Testing toString... 	Expected Output: 86 F	Output: 86.00 F
Testing raise... Passed!
Testing lower... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing validTemperature... (should throw three errors) 
Invalid temperature:Scale must be Celsius, Fahrenheit, or Kelvin (i.e. C, F, K)
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Passed!

Passed All Tests!

Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5
Celsius   |   Fahrenheit   |   Kelvin
-17.78 C   |   0.00 F   |   255.37 K
-16.39 C   |   2.50 F   |   256.76 K
-15.00 C   |   5.00 F   |   258.15 K
-13.61 C   |   7.50 F   |   259.54 K
-12.22 C   |   10.00 F   |   260.93 K
-10.83 C   |   12.50 F   |   262.32 K
-9.44 C   |   15.00 F   |   263.71 K
-8.06 C   |   17.50 F   |   265.09 K
-6.67 C   |   20.00 F   |   266.48 K
-5.28 C   |   22.50 F   |   267.87 K
-3.89 C   |   25.00 F   |   269.26 K
-2.50 C   |   27.50 F   |   270.65 K
-1.11 C   |   30.00 F   |   272.04 K
0.28 C   |   32.50 F   |   273.43 K
1.67 C   |   35.00 F   |   274.82 K
3.06 C   |   37.50 F   |   276.21 K
4.44 C   |   40.00 F   |   277.59 K
5.83 C   |   42.50 F   |   278.98 K
7.22 C   |   45.00 F   |   280.37 K
8.61 C   |   47.50 F   |   281.76 K
10.00 C   |   50.00 F   |   283.15 K
11.39 C   |   52.50 F   |   284.54 K
12.78 C   |   55.00 F   |   285.93 K
14.17 C   |   57.50 F   |   287.32 K
15.56 C   |   60.00 F   |   288.71 K
16.94 C   |   62.50 F   |   290.09 K
18.33 C   |   65.00 F   |   291.48 K
19.72 C   |   67.50 F   |   292.87 K
21.11 C   |   70.00 F   |   294.26 K
22.50 C   |   72.50 F   |   295.65 K
23.89 C   |   75.00 F   |   297.04 K
25.28 C   |   77.50 F   |   298.43 K
26.67 C   |   80.00 F   |   299.82 K
28.06 C   |   82.50 F   |   301.21 K
29.44 C   |   85.00 F   |   302.59 K
30.83 C   |   87.50 F   |   303.98 K
32.22 C   |   90.00 F   |   305.37 K
33.61 C   |   92.50 F   |   306.76 K
35.00 C   |   95.00 F   |   308.15 K
36.39 C   |   97.50 F   |   309.54 K
37.78 C   |   100.00 F   |   310.93 K
39.17 C   |   102.50 F   |   312.32 K
40.56 C   |   105.00 F   |   313.71 K
41.94 C   |   107.50 F   |   315.09 K
43.33 C   |   110.00 F   |   316.48 K
44.72 C   |   112.50 F   |   317.87 K
46.11 C   |   115.00 F   |   319.26 K
47.50 C   |   117.50 F   |   320.65 K
48.89 C   |   120.00 F   |   322.04 K
50.28 C   |   122.50 F   |   323.43 K
51.67 C   |   125.00 F   |   324.82 K
53.06 C   |   127.50 F   |   326.21 K
54.44 C   |   130.00 F   |   327.59 K
55.83 C   |   132.50 F   |   328.98 K
57.22 C   |   135.00 F   |   330.37 K
58.61 C   |   137.50 F   |   331.76 K
60.00 C   |   140.00 F   |   333.15 K
61.39 C   |   142.50 F   |   334.54 K
62.78 C   |   145.00 F   |   335.93 K
64.17 C   |   147.50 F   |   337.32 K
65.56 C   |   150.00 F   |   338.71 K
66.94 C   |   152.50 F   |   340.09 K
68.33 C   |   155.00 F   |   341.48 K
69.72 C   |   157.50 F   |   342.87 K
71.11 C   |   160.00 F   |   344.26 K
72.50 C   |   162.50 F   |   345.65 K
73.89 C   |   165.00 F   |   347.04 K
75.28 C   |   167.50 F   |   348.43 K
76.67 C   |   170.00 F   |   349.82 K
78.06 C   |   172.50 F   |   351.21 K
79.44 C   |   175.00 F   |   352.59 K
80.83 C   |   177.50 F   |   353.98 K
82.22 C   |   180.00 F   |   355.37 K
83.61 C   |   182.50 F   |   356.76 K
85.00 C   |   185.00 F   |   358.15 K
86.39 C   |   187.50 F   |   359.54 K
87.78 C   |   190.00 F   |   360.93 K
89.17 C   |   192.50 F   |   362.32 K
90.56 C   |   195.00 F   |   363.71 K
91.94 C   |   197.50 F   |   365.09 K
93.33 C   |   200.00 F   |   366.48 K
94.72 C   |   202.50 F   |   367.87 K
96.11 C   |   205.00 F   |   369.26 K
97.50 C   |   207.50 F   |   370.65 K
98.89 C   |   210.00 F   |   372.04 K
igc2@noyce-kilby:~/workspace/214/projects/08/java$ java -ea Tester
Testing Constructor... Passed!
Testing toCelsius... Passed!
Testing toFahrenheit... Passed!
Testing toKelvin... Passed!
Testing fromString... Passed!
Testing toString... 	Expected Output: 86 F	Output: 86.00 F
Testing raise... Passed!
Testing lower... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing validTemperature... (should throw three errors) 
Invalid temperature:Scale must be Celsius, Fahrenheit, or Kelvin (i.e. C, F, K)
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Passed!

Passed All Tests!

Enter the base temperature: 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Celsius   |   Fahrenheit   |   Kelvin
Invalid temperature:Degree must be between absolute zero and the Planck temperature
Invalid temperature:Degree must be between absolute zero and the Planck temperature
-273.15 C   |   -459.67 F   |   0.00 K
-253.15 C   |   -423.67 F   |   20.00 K
-233.15 C   |   -387.67 F   |   40.00 K
-213.15 C   |   -351.67 F   |   60.00 K
-193.15 C   |   -315.67 F   |   80.00 K
-173.15 C   |   -279.67 F   |   100.00 K
-153.15 C   |   -243.67 F   |   120.00 K
-133.15 C   |   -207.67 F   |   140.00 K
-113.15 C   |   -171.67 F   |   160.00 K
-93.15 C   |   -135.67 F   |   180.00 K
-73.15 C   |   -99.67 F   |   200.00 K
-53.15 C   |   -63.67 F   |   220.00 K
-33.15 C   |   -27.67 F   |   240.00 K
-13.15 C   |   8.33 F   |   260.00 K
6.85 C   |   44.33 F   |   280.00 K
26.85 C   |   80.33 F   |   300.00 K
46.85 C   |   116.33 F   |   320.00 K
66.85 C   |   152.33 F   |   340.00 K
86.85 C   |   188.33 F   |   360.00 K
igc2@noyce-kilby:~/workspace/214/projects/08/java$ make clean          ls
Makefile  script.java  Temperature.class  Temp.java  Tester.class  Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ make clean
rm -f *.class *~ *# *.o
igc2@noyce-kilby:~/workspace/214/projects/08/java$ ls
Makefile  script.java  Temp.java  Tester.java
igc2@noyce-kilby:~/workspace/214/projects/08/java$ exit

Script done on Mon 09 Apr 2018 08:09:41 PM EDT
Script started on Mon 09 Apr 2018 10:15:03 PM EDT
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ls
Makefile  script.ada  temperature_package.adb  temperature_package.ads	temperature_tester.adb
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ cat Makefile s temperature_packagea .ads temperature  _package.adb temperature.te   _tester.adb
# Makefile for GNAT (Ada) compilation

TARGET = temperature_tester
PACKAGE = temperature_package

CC = gcc
CFLAGS = -c -gnata

# linking step
$(TARGET): $(TARGET).ali $(PACKAGE).o
	gnatbind $(TARGET).ali
	gnatlink $(TARGET).ali

# compile program
$(TARGET).ali: $(TARGET).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(TARGET).adb

# compile package
$(PACKAGE).o: $(PACKAGE).adb $(PACKAGE).ads
	$(CC) $(CFLAGS) $(PACKAGE).adb

clean:
	rm -f $(TARGET) *~ *# *.o *.ali *.c
-- temp.ads declares the Temperature type and its operations
-- Author: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

package Temperature_Package is
	type Temperature is private;

	procedure Init(Tm: out Temperature; Degrees: in Float; Scale: in Character);
	function getDegrees(Tm: in Temperature) return Float;
	function getScale(Tm: in Temperature) return Character;
	function toCelsius(Tm: in Temperature) return Temperature;
	function toFahrenheit(Tm: in Temperature) return Temperature;
	function toKelvin(Tm: in Temperature) return Temperature;
	function fromString(Tm: in Temperature) return Temperature;
	procedure toString(Tm: in Temperature);
	function raiseTemp(Tm: in Temperature; RaiseInc: in Float) return Temperature;
	function lowerTemp(Tm: in Temperature; LowerInc: in Float) return Temperature;
	function equalTo(Temp1, Temp2: in Temperature) return Boolean;
	function lessThan(Temp1, Temp2: in Temperature) return Boolean;
	function validTemperature(Degrees: in Float; Scale: in Character) return Boolean;
	
	private
	type Temperature is record
		MyDegrees : Float;
		MyScale : Character;
	end record;
	aTemp : Temperature;

end Temperature_Package;
-- temperature_package.adb defines operations for the Temperature type
-- Author: Ian Christensen, CS 214 at Calvin College
-- Date: Spring, 2018


with Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling, Ada.Exceptions;
use  Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling, Ada.Exceptions;

package body temperature_package is

	-- Subroutine: Init, constructor for Temperature object
	-- Precondition: Degree and Scale must be valid for a temperature
	-- Input: Degrees, a Float; Scale, a Character
	-- Output: a Temperature object
	procedure Init(Tm: out Temperature; Degrees: in Float; Scale: in Character) is
	begin
		if validTemperature(Degrees, Scale) then
			Tm.MyDegrees := Degrees;
			Tm.MyScale := To_Upper(Scale);
		end if;
	end Init;

	-- Subroutine: getDegrees, accessor for degrees variable
	-- Precondition: myDegrees is initialized as a double value
	-- Input: Tm, a Temperature object
	-- Output: MyDegrees, a double
	function getDegrees(Tm: in Temperature) return Float is
	begin
		return Tm.MyDegrees;
	end getDegrees;

	-- Subroutine: getScale, accessor for degrees variable
	-- Precondition: myScale is initialized as a char value
	-- Input: Tm, a Temperature object
	-- Output: myScale, a double
	function getScale(Tm: in Temperature) return Character is
	begin
		return Tm.MyScale;
	end getScale;

	-- Subroutine: toCelsius, mutator for scale conversion
	-- Precondition: myScale and myDegrees are initialized
	-- Input: Tm, a Temperature object
	-- Output: new Temperature object with myScale == 'C'
	function toCelsius(Tm: in Temperature) return Temperature is
	aTemp : Temperature;
	begin
		case getScale(Tm) is
			when 'C' =>
				Init(aTemp, getDegrees(Tm), 'C');
				return aTemp;
			when 'F' =>
				Init(aTemp, (getDegrees(Tm) - 32.0) * 5.0 / 9.0, 'C');
				return aTemp;
			when 'K' =>
				Init(aTemp, getDegrees(Tm) - 273.15, 'C');
				return aTemp;
			when others =>
				return aTemp;
		end case;
	end toCelsius;

	-- Subroutine: toFahrenheit, mutator for scale conversion
	-- Precondition: myScale and myDegrees are initialized
	-- Input: Tm, a Temperature object
	-- Output: new Temperature object with myScale == 'F'
	function toFahrenheit(Tm: in Temperature) return Temperature is
	aTemp : Temperature;
	begin
		case getScale(Tm) is
			when 'C' =>
				Init(aTemp, getDegrees(Tm) * 1.8 + 32.0, 'F');
				return aTemp;
			when 'F' =>
				Init(aTemp, getDegrees(Tm), 'F');
				return aTemp;
			when 'K' =>
				Init(aTemp, (getDegrees(Tm) - 273.15) * 1.8 + 32.0, 'F');
				return aTemp;
			when others =>
				return aTemp;
		end case;
	end toFahrenheit;

	-- Subroutine: toKelvin, mutator for scale conversion
	-- Precondition: myScale and myDegrees are initialized
	-- Input: Tm, a Temperature object
	-- Output: new Temperature object with myScale == 'K'
	function toKelvin(Tm: in Temperature) return Temperature is
	aTemp : Temperature;
	begin
		case getScale(Tm) is
			when 'C' =>
				Init(aTemp, getDegrees(Tm) + 273.15, 'K');
				return aTemp;
			when 'F' =>
				Init(aTemp, (getDegrees(Tm) + 459.67) * 5.0 / 9.0, 'K');
				return aTemp;
			when 'K' =>
				Init(aTemp, getDegrees(Tm), 'K');
				return aTemp;
			when others =>
				return aTemp;
		end case;
	end toKelvin;

	-- Subroutine: fromString, input for user strings
	-- Precondition: temperature_string is in format "0.0 C     "
	-- Input: String_Temp, a String
	-- Output: new Temperature object
	function fromString(Tm: in Temperature) return Temperature is
	aDegr : Float;
	aChar, empty : Character;
	aTemp : Temperature;
	begin
		Get(aDegr);
		Get(empty);
		Get(aChar);
		Init(aTemp, aDegr, aChar);
		return aTemp;
	end fromString;

	-- Subroutine: toString, stringifies a Temperature object
	-- Precondition: myDegrees and myScale are initialized
	-- Input: Tm, a Temperature object
	-- Output: String format of a Temperature object
	procedure toString(Tm: in Temperature) is
	begin
		Put(getDegrees(Tm));
		Put(" ");
		Put(getScale(Tm));
	end toString;

	-- Subroutine: raiseTemp, mutator that increments a temperature's degree
	-- Postcondition: the result cannot exceed the Planck Temperature
	-- Input: Tm, a Temperature object; RaiseInc, a float
	-- Output: new Temperature object with raised degree
	function raiseTemp(Tm: in Temperature; RaiseInc: in Float) return Temperature is
	aTemp : Temperature;
	begin
		Init(aTemp, getDegrees(Tm) + RaiseInc, getScale(Tm));
		return aTemp;
	end raiseTemp;

	-- Subroutine: lowerTemp, mutator that decrements a temperature's degree
	-- Postcondition: the result cannot deceed absolute zero
	-- Input: Tm, a Temperature object; LowerInc, a float
	-- Output: new Temperature object with lowered degree
	function lowerTemp(Tm: in Temperature; LowerInc: in Float) return Temperature is
	aTemp : Temperature;
	begin
		Init(aTemp, getDegrees(Tm) - LowerInc, getScale(Tm));
		return aTemp;
	end lowerTemp;

	-- Subroutine: equalTo, equality operator for temperature regardless of scale
	-- Preconditions: Temp1 and Temp2 are a valid Temperature objects
	-- Input: Temp1, Temp2, Temperature objects
	-- Output: true if equal, false if not equal
	function equalTo(Temp1, Temp2: in Temperature) return Boolean is
	begin
		case getScale(Temp1) is
			when 'C' =>
				return getDegrees(Temp1) = getDegrees(toCelsius(Temp2));
			when 'F' =>
				return getDegrees(Temp1) = getDegrees(toFahrenheit(Temp2));
			when 'K' =>
				return getDegrees(Temp1) = getDegrees(toKelvin(Temp2));
			when others =>
				return False;
		end case;
	end equalTo;

	-- Subroutine: lessThan, less than operator for temperature regardless of scale
	-- Precondition: Temp1 and Temp2 are a valid Temperature objects
	-- Input: Temp1, Temp2, Temperature objects
	-- Output: true if less than, false if not less than
	function lessThan(Temp1, Temp2: in Temperature) return Boolean is
	begin
		case getScale(Temp1) is
			when 'C' =>
				return getDegrees(Temp1) < getDegrees(toCelsius(Temp2));
			when 'F' =>
				return getDegrees(Temp1) < getDegrees(toFahrenheit(Temp2));
			when 'K' =>
				return getDegrees(Temp1) < getDegrees(toKelvin(Temp2));
			when others =>
				return False;
		end case;
	end lessThan;

	-- Subroutine: validTemperatureerature, assesses whether the degree and scale are valid
	-- Precondition: Tm, Degrees, and Scale exist
	-- Input: degrees, a double; scale, a char
	-- Output: true, if a valid temperature
	function validTemperature(Degrees: in Float; Scale: in Character) return Boolean is
	DegreesEx, ScaleEx, Ex : exception;
	begin
		case Scale is
			when 'C' =>
				if (degrees >= -273.15 and degrees <= 141683385000000005000000000000273.15) then
					return True;
				else
					Raise_Exception(DegreesEx'Identity, "Degree must be between absolute zero and the Planck temperature");
				end if;
			when 'F' =>
				if (degrees >= -459.67 and degrees <= 255030093000000008999999999999540.33) then
					return True;
				else
					Raise_Exception(DegreesEx'Identity, "Degree must be between absolute zero and the Planck temperature");
				end if;
			when 'K' =>
				if (degrees >= 0.0 and degrees <= 141683385000000005000000000000000.0) then
					return True;
				else
					Raise_Exception(DegreesEx'Identity, "Degree must be between absolute zero and the Planck temperature");
				end if;
			when others =>
				Raise_Exception(ScaleEx'Identity, "Scale must be Celsius, Fahrenheit, or Kelvin (i.e. C, F, K)");
		end case;
	end validTemperature;
end temperature_package;
-- tester.adb acts as a driver for the Temperature Type
-- Author: Ian Christensen, for CS 214 at Calvin College
-- Date: Spring, 2018

with Ada.Text_IO, Ada.Float_Text_IO, temperature_package;
use  Ada.Text_IO, Ada.Float_Text_IO, temperature_package;

procedure Temperature_Tester is
	aTemp : temperature_package.Temperature;
	INPUT_SIZE : constant Positive := 10;
	Temp1, Temp2, base, limit : temperature_package.Temperature;
	step : Float;
	i : Integer;
begin
	
	--Tests
	Put("Testing Constructor... ");
	temperature_package.Init(aTemp, 77.00, 'F');
	pragma Assert(getDegrees(aTemp) = 77.00, "getDegrees() failed");
	pragma Assert(getScale(aTemp) = 'F', "getScale() failed");
	Put("Passed!"); New_Line;

	Put("Testing toCelsius... ");
	aTemp := toCelsius(aTemp);
	pragma Assert(getDegrees(aTemp) = 25.00, "toCelsius() failed");
	pragma Assert(getScale(aTemp) = 'C', "toCelsius() failed");
	Put("Passed!"); New_Line;

	Put("Testing toFahrenheit... ");
	aTemp := toFahrenheit(aTemp);
	pragma Assert(getDegrees(aTemp) = 77.00, "toFahrenheit() failed");
	pragma Assert(getScale(aTemp) = 'F', "toFahrenheit() failed");
	Put("Passed!"); New_Line;

	Put("Testing toKelvin... ");
	aTemp := toKelvin(aTemp);
	pragma Assert((getDegrees(aTemp) - 298.15) <= 0.001, "toKelvin() failed");
	pragma Assert(getScale(aTemp) = 'K', "toKelvin() failed");
	Put("Passed!"); New_Line;

	Put("Testing toString... ");
	temperature_package.Init(aTemp, 86.0, 'F');
	pragma Assert(getDegrees(aTemp) = 86.00, "toString() failed");
	pragma Assert(getScale(aTemp) = 'F', "toString() failed");
	Put("Expected: 8.60000E+01 F   Output: ");
	toString(aTemp); New_Line;

	Put("Testing raiseTemp... ");
	aTemp := raiseTemp(aTemp, 10.0);
	pragma Assert(getDegrees(aTemp) = 96.00, "raiseTemp() failed");
	pragma Assert(getScale(aTemp) = 'F', "raiseTemp() failed");
	Put("Passed!"); New_Line;

	Put("Testing lowerTemp... ");
	aTemp := lowerTemp(aTemp, 10.0);
	pragma Assert(getDegrees(aTemp) = 86.00, "lowerTemp() failed");
	pragma Assert(getScale(aTemp) = 'F', "lowerTemp() failed");
	Put("Passed!"); New_Line;

	Put("Testing equalTo... ");
	Temp1 := toKelvin(aTemp);
	Temp2 := toCelsius(raiseTemp(aTemp, 10.0)); 
	-- pragma Assert(equalTo(aTemp, aTemp), "equalTo() failed");
	-- pragma Assert(equalTo(Temp1, Temp2) = False, "equalTo() failed");
	Put("Passed!"); New_Line;

	Put("Testing lessThan... ");
	-- pragma Assert(lessThan(aTemp, Temp1) = False, "lessThan() failed");
	-- pragma Assert(lessThan(Temp1, Temp2) = True, "lessThan() failed");
	Put("Passed!"); New_Line;

	Put("Testing validateTemp... ");

	Put("Passed!"); New_Line; New_Line;
	Put("Passed All Tests!"); New_Line; New_Line;

	base := aTemp;
	limit := aTemp;
	Put("Enter the base temperature: ");
	base := fromString(base);
	Put("Enter the limit temperature: ");
	limit := fromString(limit);
	Put("Enter the step value: ");
	Get(step);

	i := 0;
	Put("Celsius   |   Fahrenheit   |   Kelvin"); New_Line;
	while lessThan(base, limit) loop
		toString(toCelsius(base));
		Put("   |   ");
		toString(toFahrenheit(base));
		Put("   |   ");
		toString(toKelvin(base)); 
		New_Line;
		base := raiseTemp(base, step);
		i := i + 1;
	end loop;
end Temperature_Tester;
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ls
Makefile  script.ada  temperature_package.adb  temperature_package.ads	temperature_tester.adb
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ make
gcc -c -gnata temperature_tester.adb
gcc -c -gnata temperature_package.adb
gnatbind temperature_tester.ali
gnatlink temperature_tester.ali
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ls
Makefile  script.ada  temperature_package.adb  temperature_package.ads	temperature_package.ali  temperature_package.o	temperature_tester  temperature_tester.adb  temperature_tester.ali  temperature_tester.o
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ./temperature_tester. 
Testing Constructor... Passed!
Testing toCelsius... Passed!
Testing toFahrenheit... Passed!
Testing toKelvin... Passed!
Testing toString... Expected: 8.60000E+01 F   Output:  8.60000E+01 F
Testing raiseTemp... Passed!
Testing lowerTemp... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing validateTemp... Passed!

Passed All Tests!

Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5
Celsius   |   Fahrenheit   |   Kelvin
-1.77778E+01 C   |    0.00000E+00 F   |    2.55372E+02 K
-1.63889E+01 C   |    2.50000E+00 F   |    2.56761E+02 K
-1.50000E+01 C   |    5.00000E+00 F   |    2.58150E+02 K
-1.36111E+01 C   |    7.50000E+00 F   |    2.59539E+02 K
-1.22222E+01 C   |    1.00000E+01 F   |    2.60928E+02 K
-1.08333E+01 C   |    1.25000E+01 F   |    2.62317E+02 K
-9.44444E+00 C   |    1.50000E+01 F   |    2.63706E+02 K
-8.05556E+00 C   |    1.75000E+01 F   |    2.65094E+02 K
-6.66667E+00 C   |    2.00000E+01 F   |    2.66483E+02 K
-5.27778E+00 C   |    2.25000E+01 F   |    2.67872E+02 K
-3.88889E+00 C   |    2.50000E+01 F   |    2.69261E+02 K
-2.50000E+00 C   |    2.75000E+01 F   |    2.70650E+02 K
-1.11111E+00 C   |    3.00000E+01 F   |    2.72039E+02 K
 2.77778E-01 C   |    3.25000E+01 F   |    2.73428E+02 K
 1.66667E+00 C   |    3.50000E+01 F   |    2.74817E+02 K
 3.05556E+00 C   |    3.75000E+01 F   |    2.76206E+02 K
 4.44444E+00 C   |    4.00000E+01 F   |    2.77594E+02 K
 5.83333E+00 C   |    4.25000E+01 F   |    2.78983E+02 K
 7.22222E+00 C   |    4.50000E+01 F   |    2.80372E+02 K
 8.61111E+00 C   |    4.75000E+01 F   |    2.81761E+02 K
 1.00000E+01 C   |    5.00000E+01 F   |    2.83150E+02 K
 1.13889E+01 C   |    5.25000E+01 F   |    2.84539E+02 K
 1.27778E+01 C   |    5.50000E+01 F   |    2.85928E+02 K
 1.41667E+01 C   |    5.75000E+01 F   |    2.87317E+02 K
 1.55556E+01 C   |    6.00000E+01 F   |    2.88706E+02 K
 1.69444E+01 C   |    6.25000E+01 F   |    2.90094E+02 K
 1.83333E+01 C   |    6.50000E+01 F   |    2.91483E+02 K
 1.97222E+01 C   |    6.75000E+01 F   |    2.92872E+02 K
 2.11111E+01 C   |    7.00000E+01 F   |    2.94261E+02 K
 2.25000E+01 C   |    7.25000E+01 F   |    2.95650E+02 K
 2.38889E+01 C   |    7.50000E+01 F   |    2.97039E+02 K
 2.52778E+01 C   |    7.75000E+01 F   |    2.98428E+02 K
 2.66667E+01 C   |    8.00000E+01 F   |    2.99817E+02 K
 2.80556E+01 C   |    8.25000E+01 F   |    3.01206E+02 K
 2.94444E+01 C   |    8.50000E+01 F   |    3.02594E+02 K
 3.08333E+01 C   |    8.75000E+01 F   |    3.03983E+02 K
 3.22222E+01 C   |    9.00000E+01 F   |    3.05372E+02 K
 3.36111E+01 C   |    9.25000E+01 F   |    3.06761E+02 K
 3.50000E+01 C   |    9.50000E+01 F   |    3.08150E+02 K
 3.63889E+01 C   |    9.75000E+01 F   |    3.09539E+02 K
 3.77778E+01 C   |    1.00000E+02 F   |    3.10928E+02 K
 3.91667E+01 C   |    1.02500E+02 F   |    3.12317E+02 K
 4.05556E+01 C   |    1.05000E+02 F   |    3.13706E+02 K
 4.19444E+01 C   |    1.07500E+02 F   |    3.15094E+02 K
 4.33333E+01 C   |    1.10000E+02 F   |    3.16483E+02 K
 4.47222E+01 C   |    1.12500E+02 F   |    3.17872E+02 K
 4.61111E+01 C   |    1.15000E+02 F   |    3.19261E+02 K
 4.75000E+01 C   |    1.17500E+02 F   |    3.20650E+02 K
 4.88889E+01 C   |    1.20000E+02 F   |    3.22039E+02 K
 5.02778E+01 C   |    1.22500E+02 F   |    3.23428E+02 K
 5.16667E+01 C   |    1.25000E+02 F   |    3.24817E+02 K
 5.30556E+01 C   |    1.27500E+02 F   |    3.26206E+02 K
 5.44444E+01 C   |    1.30000E+02 F   |    3.27594E+02 K
 5.58333E+01 C   |    1.32500E+02 F   |    3.28983E+02 K
 5.72222E+01 C   |    1.35000E+02 F   |    3.30372E+02 K
 5.86111E+01 C   |    1.37500E+02 F   |    3.31761E+02 K
 6.00000E+01 C   |    1.40000E+02 F   |    3.33150E+02 K
 6.13889E+01 C   |    1.42500E+02 F   |    3.34539E+02 K
 6.27778E+01 C   |    1.45000E+02 F   |    3.35928E+02 K
 6.41667E+01 C   |    1.47500E+02 F   |    3.37317E+02 K
 6.55556E+01 C   |    1.50000E+02 F   |    3.38706E+02 K
 6.69444E+01 C   |    1.52500E+02 F   |    3.40094E+02 K
 6.83333E+01 C   |    1.55000E+02 F   |    3.41483E+02 K
 6.97222E+01 C   |    1.57500E+02 F   |    3.42872E+02 K
 7.11111E+01 C   |    1.60000E+02 F   |    3.44261E+02 K
 7.25000E+01 C   |    1.62500E+02 F   |    3.45650E+02 K
 7.38889E+01 C   |    1.65000E+02 F   |    3.47039E+02 K
 7.52778E+01 C   |    1.67500E+02 F   |    3.48428E+02 K
 7.66667E+01 C   |    1.70000E+02 F   |    3.49817E+02 K
 7.80556E+01 C   |    1.72500E+02 F   |    3.51206E+02 K
 7.94444E+01 C   |    1.75000E+02 F   |    3.52594E+02 K
 8.08333E+01 C   |    1.77500E+02 F   |    3.53983E+02 K
 8.22222E+01 C   |    1.80000E+02 F   |    3.55372E+02 K
 8.36111E+01 C   |    1.82500E+02 F   |    3.56761E+02 K
 8.50000E+01 C   |    1.85000E+02 F   |    3.58150E+02 K
 8.63889E+01 C   |    1.87500E+02 F   |    3.59539E+02 K
 8.77778E+01 C   |    1.90000E+02 F   |    3.60928E+02 K
 8.91667E+01 C   |    1.92500E+02 F   |    3.62317E+02 K
 9.05556E+01 C   |    1.95000E+02 F   |    3.63706E+02 K
 9.19444E+01 C   |    1.97500E+02 F   |    3.65094E+02 K
 9.33333E+01 C   |    2.00000E+02 F   |    3.66483E+02 K
 9.47222E+01 C   |    2.02500E+02 F   |    3.67872E+02 K
 9.61111E+01 C   |    2.05000E+02 F   |    3.69261E+02 K
 9.75000E+01 C   |    2.07500E+02 F   |    3.70650E+02 K
 9.88889E+01 C   |    2.10000E+02 F   |    3.72039E+02 K
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ./temperature_tester
Testing Constructor... Passed!
Testing toCelsius... Passed!
Testing toFahrenheit... Passed!
Testing toKelvin... Passed!
Testing toString... Expected: 8.60000E+01 F   Output:  8.60000E+01 F
Testing raiseTemp... Passed!
Testing lowerTemp... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing validateTemp... Passed!

Passed All Tests!

Enter the base temperature: 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0
Celsius   |   Fahrenheit   |   Kelvin
-2.73150E+02 C   |   -4.59670E+02 F   |    0.00000E+00 K
-2.53150E+02 C   |   -4.23670E+02 F   |    2.00000E+01 K
-2.33150E+02 C   |   -3.87670E+02 F   |    4.00000E+01 K
-2.13150E+02 C   |   -3.51670E+02 F   |    6.00000E+01 K
-1.93150E+02 C   |   -3.15670E+02 F   |    8.00000E+01 K
-1.73150E+02 C   |   -2.79670E+02 F   |    1.00000E+02 K
-1.53150E+02 C   |   -2.43670E+02 F   |    1.20000E+02 K
-1.33150E+02 C   |   -2.07670E+02 F   |    1.40000E+02 K
-1.13150E+02 C   |   -1.71670E+02 F   |    1.60000E+02 K
-9.31500E+01 C   |   -1.35670E+02 F   |    1.80000E+02 K
-7.31500E+01 C   |   -9.96700E+01 F   |    2.00000E+02 K
-5.31500E+01 C   |   -6.36700E+01 F   |    2.20000E+02 K
-3.31500E+01 C   |   -2.76700E+01 F   |    2.40000E+02 K
-1.31500E+01 C   |    8.33001E+00 F   |    2.60000E+02 K
 6.85001E+00 C   |    4.43300E+01 F   |    2.80000E+02 K
 2.68500E+01 C   |    8.03300E+01 F   |    3.00000E+02 K
 4.68500E+01 C   |    1.16330E+02 F   |    3.20000E+02 K
 6.68500E+01 C   |    1.52330E+02 F   |    3.40000E+02 K
 8.68500E+01 C   |    1.88330E+02 F   |    3.60000E+02 K
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ make clean
rm -f temperature_tester *~ *# *.o *.ali *.c
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ ls
Makefile  script.ada  temperature_package.adb  temperature_package.ads	temperature_tester.adb
igc2@noyce-kilby:~/workspace/214/projects/08/ada$ exit

Script done on Mon 09 Apr 2018 10:16:26 PM EDT
;;; Tester.el simulates and tests an e-LISP Temperature type
;;; Author: Ian Christensen, CS 214 at Calvin College
;;; Date: Spring, 2018

(setq load-path (cons "." load-path))

("." "." "." "/usr/share/emacs24/site-lisp/a2ps" "/etc/emacs24" "/etc/emacs" "/usr/local/share/emacs/24.5/site-lisp" "/usr/local/share/emacs/site-lisp" "/usr/share/emacs24/site-lisp/erlang" "/usr/share/emacs24/site-lisp/dictionaries-common" "/usr/share/emacs24/site-lisp/cmake-data" "/usr/share/emacs/site-lisp/autoconf" ...)

"A simple driver for our Temperature functions"
(progn
  (load "/home/igc2/workspace/214/projects/08/e-lisp/Temp.el")
 
t

  (message "Enter a base Temperature: ")
  (setq baseTemp (fromString))
  (message "Enter a limit Temperature: ")
  (setq limitTemp (fromString))
  (setq increment (string-to-number
   (read-from-minibuffer "Enter an increment value: ")))


  (setq buf (get-buffer "nameTester.el"))
  (terpri buf)
  (princ "Celsius   |   Fahrenheit   |   Kelvin")
  (while (= (lessThan baseTemp limitTemp) 1)
    (toString (toFahrenheit baseTemp) buf)
    (princ "   |   ")
    (toString (toCelsius baseTemp) buf)
    (princ "   |   ")
    (toString (toKelvin baseTemp) buf)
    (terpri buf)
    (setq baseTemp (raise baseTemp increment)))
  
  (terpri buf)
  (princ "All tests passed!" buf)
  (terpri buf))


Celsius   |   Fahrenheit   |   Kelvin-241.14999999999998 F   |   -273.15 C   |   0 K
-221.14999999999998 F   |   -253.14999999999998 C   |   20.0 K
-201.14999999999998 F   |   -233.14999999999998 C   |   40.0 K
-181.14999999999998 F   |   -213.14999999999998 C   |   60.0 K
-161.14999999999998 F   |   -193.14999999999998 C   |   80.0 K
-141.14999999999998 F   |   -173.14999999999998 C   |   100.0 K
-121.14999999999998 F   |   -153.14999999999998 C   |   120.0 K
-101.14999999999998 F   |   -133.14999999999998 C   |   140.0 K
-81.14999999999998 F   |   -113.14999999999998 C   |   160.0 K
-61.14999999999998 F   |   -93.14999999999998 C   |   180.0 K
-41.14999999999998 F   |   -73.14999999999998 C   |   200.0 K
-21.149999999999977 F   |   -53.14999999999998 C   |   220.0 K
-1.1499999999999773 F   |   -33.14999999999998 C   |   240.0 K
18.850000000000023 F   |   -13.149999999999977 C   |   260.0 K
38.85000000000002 F   |   6.850000000000023 C   |   280.0 K
58.85000000000002 F   |   26.850000000000023 C   |   300.0 K
78.85000000000002 F   |   46.85000000000002 C   |   320.0 K
98.85000000000002 F   |   66.85000000000002 C   |   340.0 K
118.85000000000002 F   |   86.85000000000002 C   |   360.0 K

All tests passed!
t

Celsius   |   Fahrenheit   |   Kelvin0 F   |   -17.77777777777778 C   |   255.3722222222222 K
2.5 F   |   -16.38888888888889 C   |   256.76111111111106 K
5.0 F   |   -15.0 C   |   258.15 K
7.5 F   |   -13.61111111111111 C   |   259.5388888888889 K
10.0 F   |   -12.222222222222221 C   |   260.92777777777775 K
12.5 F   |   -10.833333333333334 C   |   262.31666666666666 K
15.0 F   |   -9.444444444444445 C   |   263.7055555555555 K
17.5 F   |   -8.055555555555555 C   |   265.09444444444443 K
20.0 F   |   -6.666666666666666 C   |   266.4833333333333 K
22.5 F   |   -5.277777777777778 C   |   267.8722222222222 K
25.0 F   |   -3.888888888888889 C   |   269.26111111111106 K
27.5 F   |   -2.5 C   |   270.65 K
30.0 F   |   -1.1111111111111112 C   |   272.0388888888889 K
32.5 F   |   0.2777777777777778 C   |   273.42777777777775 K
35.0 F   |   1.6666666666666665 C   |   274.81666666666666 K
37.5 F   |   3.0555555555555554 C   |   276.2055555555555 K
40.0 F   |   4.444444444444445 C   |   277.59444444444443 K
42.5 F   |   5.833333333333333 C   |   278.9833333333333 K
45.0 F   |   7.222222222222222 C   |   280.3722222222222 K
47.5 F   |   8.61111111111111 C   |   281.76111111111106 K
50.0 F   |   10.0 C   |   283.15 K
52.5 F   |   11.38888888888889 C   |   284.5388888888889 K
55.0 F   |   12.777777777777777 C   |   285.92777777777775 K
57.5 F   |   14.166666666666666 C   |   287.31666666666666 K
60.0 F   |   15.555555555555555 C   |   288.7055555555555 K
62.5 F   |   16.944444444444443 C   |   290.09444444444443 K
65.0 F   |   18.333333333333332 C   |   291.4833333333333 K
67.5 F   |   19.72222222222222 C   |   292.8722222222222 K
70.0 F   |   21.11111111111111 C   |   294.26111111111106 K
72.5 F   |   22.5 C   |   295.65 K
75.0 F   |   23.88888888888889 C   |   297.0388888888889 K
77.5 F   |   25.27777777777778 C   |   298.42777777777775 K
80.0 F   |   26.666666666666664 C   |   299.81666666666666 K
82.5 F   |   28.055555555555554 C   |   301.2055555555555 K
85.0 F   |   29.444444444444443 C   |   302.59444444444443 K
87.5 F   |   30.833333333333332 C   |   303.9833333333333 K
90.0 F   |   32.22222222222222 C   |   305.3722222222222 K
92.5 F   |   33.61111111111111 C   |   306.76111111111106 K
95.0 F   |   35.0 C   |   308.15 K
97.5 F   |   36.388888888888886 C   |   309.5388888888889 K
100.0 F   |   37.77777777777778 C   |   310.92777777777775 K
102.5 F   |   39.166666666666664 C   |   312.31666666666666 K
105.0 F   |   40.55555555555556 C   |   313.7055555555555 K
107.5 F   |   41.94444444444444 C   |   315.09444444444443 K
110.0 F   |   43.333333333333336 C   |   316.4833333333333 K
112.5 F   |   44.72222222222222 C   |   317.8722222222222 K
115.0 F   |   46.11111111111111 C   |   319.26111111111106 K
117.5 F   |   47.5 C   |   320.65 K
120.0 F   |   48.888888888888886 C   |   322.0388888888889 K
122.5 F   |   50.27777777777778 C   |   323.42777777777775 K
125.0 F   |   51.666666666666664 C   |   324.81666666666666 K
127.5 F   |   53.05555555555556 C   |   326.2055555555555 K
130.0 F   |   54.44444444444444 C   |   327.59444444444443 K
132.5 F   |   55.83333333333333 C   |   328.9833333333333 K
135.0 F   |   57.22222222222222 C   |   330.3722222222222 K
137.5 F   |   58.61111111111111 C   |   331.76111111111106 K
140.0 F   |   60.0 C   |   333.15 K
142.5 F   |   61.388888888888886 C   |   334.5388888888889 K
145.0 F   |   62.77777777777778 C   |   335.92777777777775 K
147.5 F   |   64.16666666666667 C   |   337.31666666666666 K
150.0 F   |   65.55555555555556 C   |   338.7055555555555 K
152.5 F   |   66.94444444444444 C   |   340.09444444444443 K
155.0 F   |   68.33333333333333 C   |   341.4833333333333 K
157.5 F   |   69.72222222222221 C   |   342.8722222222222 K
160.0 F   |   71.11111111111111 C   |   344.26111111111106 K
162.5 F   |   72.5 C   |   345.65 K
165.0 F   |   73.88888888888889 C   |   347.0388888888889 K
167.5 F   |   75.27777777777777 C   |   348.42777777777775 K
170.0 F   |   76.66666666666667 C   |   349.81666666666666 K
172.5 F   |   78.05555555555556 C   |   351.2055555555555 K
175.0 F   |   79.44444444444444 C   |   352.59444444444443 K
177.5 F   |   80.83333333333333 C   |   353.9833333333333 K
180.0 F   |   82.22222222222221 C   |   355.3722222222222 K
182.5 F   |   83.61111111111111 C   |   356.76111111111106 K
185.0 F   |   85.0 C   |   358.15 K
187.5 F   |   86.38888888888889 C   |   359.5388888888889 K
190.0 F   |   87.77777777777777 C   |   360.92777777777775 K
192.5 F   |   89.16666666666667 C   |   362.31666666666666 K
195.0 F   |   90.55555555555556 C   |   363.7055555555555 K
197.5 F   |   91.94444444444444 C   |   365.09444444444443 K
200.0 F   |   93.33333333333333 C   |   366.4833333333333 K
202.5 F   |   94.72222222222221 C   |   367.8722222222222 K
205.0 F   |   96.11111111111111 C   |   369.26111111111106 K
207.5 F   |   97.5 C   |   370.65 K
210.0 F   |   98.88888888888889 C   |   372.0388888888889 K

All tests passed!
t

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; THIS IS THE BEGINNING OF MY TEMPERATURE CLASS AND METHOD DECLARATIONS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; temperature.el implements class Temperature
;;; Author: Ian Christensen, for CS 214 at Calvin College
;;; Date: Spring, 2018

"Subroutine: initialize, 
 Precondition: degrees and scale have values
 Input: degrees, a real & scale, a character
 Output: a Temperature object"
(defun Temp(myDegrees myScale)
  (if (= (validate myDegrees myScale) 1)
      (list myDegrees myScale)
    (princ "Error: Init(): invalid temperatures")))

"Function: getDegrees, accessor for degrees variable
 Parameters: Temperature object
 Preconditions: myDegrees is initialized as a double value
 Returns: myDegrees, a double"
(defun getDegrees(atemp)
  (car atemp))

"Function: getScale, accessor for degrees variable
 Parameters: Temperature object
 Preconditions: myScale is initialized as a char value
 Returns: myScale, a double"
(defun getScale(atemp)
  (car (cdr atemp)))

"Subroutine: toCelsius, mutator for scale conversion
 Precondition: @scale and @degrees are initialized
 Input: a Temperature object
 Output: new Temperature object with @scale == 'C'"
(defun toCelsius (atemp)
  (setq scale (upcase (getScale atemp)))
  (if (string= scale "F")
      (setq convertedDegrees (/ (- (getDegrees atemp) 32) 1.8))
    (if (string= scale "K")
(setq convertedDegrees (- (getDegrees atemp) 273.15))
      (setq convertedDegrees (getDegrees atemp))))
  (Temp convertedDegrees "C"))

"Subroutine: toFahrenheit, mutator for scale conversion
 Precondition: @scale and @degrees are initialized
 Input: a Temperature object
 Output: new Temperature object with @scale == 'F'"
(defun toFahrenheit (atemp)
  (setq scale (upcase (getScale atemp)))
  (if (string= scale "C")
      (setq convertedDegrees (+ 32 (* (getDegrees atemp) 1.8)))
    (if (string= scale "K")
(setq convertedDegrees (+ 32 (* (/ 9 5) (- (getDegrees atemp) 273.15))))
      (setq convertedDegrees (getDegrees atemp))))
  (Temp convertedDegrees "F"))

"Subroutine: toKelvin, mutator for scale conversion
 Precondition: @scale and @degrees are initialized
 Input: a Temperature object
 Output: new Temperature object with @scale == 'K'"
(defun toKelvin (atemp)
  (setq scale (upcase (getScale atemp)))
  (if (string= scale "F")
      (setq convertedDegrees (+ (/ (- (getDegrees atemp) 32) 1.8) 273.15))
  (if (string= scale "C")
    (setq convertedDegrees (+ (getDegrees atemp) 273.15))
      (setq convertedDegrees (getDegrees atemp))))
  (Temp convertedDegrees "K"))

"Subroutine: fromString, input for user strings
 Precondition: temperature_string is in format 
 Input: String_Temp, a String
 Output: new Temperature object"
(defun fromString()
  (setq inputList (split-string (read-from-minibuffer "Enter Temperature: ")))
  (setq scale (getScale inputList))
  (setq degrees (string-to-number (getDegrees inputList)))
  (Temp degrees scale))

"Subroutine: toString, stringifies a Temperature object
 Precondition: @degrees and @scale are initialized
 Input: a Temperature object
 Output: String format of a Temperature object"
(defun toString (atemp buf)
  (princ (getDegrees atemp) buf)
  (princ " ")
  (princ (upcase (getScale atemp)) buf))

"Subroutine: raiseTemp, mutator that increments a temperature's degree
 Postcondition: the result cannot exceed the Planck Temperature
 Input: a Temperature object & RaiseInc, a float
 Output: new Temperature object with raised degree"
(defun raise (atemp degrees)
  (Temp (+ (getDegrees atemp) degrees) (getScale atemp)))

"Subroutine: lowerTemp, mutator that decrements a temperature's degree
 Postcondition: the result cannot deceed absolute zero
 Input: a Temperature object & LowerInc, a float
 Output: new Temperature object with lowered degree"
(defun lower (atemp degrees)
  (Temp (- (getDegrees atemp) degrees) (getScale atemp)))

"Subroutine: equalTo, equality operator for temperature regardless of scale
 Preconditions: otherTemp is a valid Temperature object
 Input: otherTemp, a Temperature object
 Output: true if equal, false if not equal"
 (defun equalTo(theTemp otherTemp)
  (cond
    ((string= (getScale theTemp) "C")
      (= (getDegrees theTemp) (getDegrees (toCelsius otherTemp))))
    ((string= (getScale theTemp) "F")
      (= (getDegrees theTemp) (getDegrees (toFahrenheit otherTemp))))
    ((string= (getScale theTemp) "K")
      (= (getDegrees theTemp) (getDegrees (toKelvin otherTemp))))
    (t "Invalid Input")
  )
 )

"Subroutine: lessThan, less than operator for temperature regardless of scale
 Precondition: otherTemp is a valid Temperature object
 Input: otherTemp, a Temperature object
 Output: true if less than, false if not less than"
(defun lessThan(theTemp otherTemp)
  (cond
    ((string= (getScale theTemp) "C")
      (if (< (getDegrees theTemp) (getDegrees (toCelsius otherTemp))) 1 0))
    ((string= (getScale theTemp) "F")
      (if (< (getDegrees theTemp) (getDegrees (toFahrenheit otherTemp))) 1 0))
    ((string= (getScale theTemp) "K")
      (if (< (getDegrees theTemp) (getDegrees (toKelvin otherTemp))) 1 0))
    (t "Invalid Input")
  )
)

"Subroutine: validateTemperature, assesses whether the degree and scale are valid
 Precondition: Degrees and Scale exist
 Input: degrees, a double & scale, a char
 Output: true, if a valid temperature"
(defun validate(degrees myScale)
  (setq scale (upcase myScale))

  (cond ((string= scale "F")
(if (>= degrees -351.67)
     1
   (progn
     (princ "Error: validate() F: less than absolute 0")
     0)))
((string= scale "C")
  (if (>= degrees -273.15)
      1
    (progn
      (princ "Error: validate() C: less than absolute 0")
      0)))

  ((string= scale "K")
   (if (>= degrees 0)
       1
     (progn
       (princ "Error: validate() K: less than absolute 0")
       0)))
  (t (error "Error validate(): not a valid scale"))))

(byte-compile-file "/home/igc2/workspace/214/projects/08/e-lisp/Temp.el")
Script started on Tue 10 Apr 2018 03:10:20 PM EDT
ls
igc2@backus-naur:~/workspace/214/projects/08/ruby$ ls
script.ruby  Temperature.rb  temperatureTester.rb
igc2@backus-naur:~/workspace/214/projects/08/ruby$ ruby T temperatureTester.rb
Testing Constructor... Passed!
Testing toFahrenheit... Passed!
Testing toCelsius... Passed!
Testing toKelvin... Passed!
Testing raiseTemp... Passed!
Testing lowerTemp... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing fromString and toString... 
Enter a Temperature value: 10  2352.47 C
Temperature value fromString: 2352.47 CAll Tests Passed!
Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5
Celsius   |   Fahrenheit   |   Kelvin
-17.78 C   |   0.0 F   |   255.37 K
-16.39 C   |   2.5 F   |   256.76 K
-15.0 C   |   5.0 F   |   258.15 K
-13.61 C   |   7.5 F   |   259.54 K
-12.22 C   |   10.0 F   |   260.93 K
-10.83 C   |   12.5 F   |   262.32 K
-9.44 C   |   15.0 F   |   263.71 K
-8.06 C   |   17.5 F   |   265.09 K
-6.67 C   |   20.0 F   |   266.48 K
-5.28 C   |   22.5 F   |   267.87 K
-3.89 C   |   25.0 F   |   269.26 K
-2.5 C   |   27.5 F   |   270.65 K
-1.11 C   |   30.0 F   |   272.04 K
0.28 C   |   32.5 F   |   273.43 K
1.67 C   |   35.0 F   |   274.82 K
3.06 C   |   37.5 F   |   276.21 K
4.44 C   |   40.0 F   |   277.59 K
5.83 C   |   42.5 F   |   278.98 K
7.22 C   |   45.0 F   |   280.37 K
8.61 C   |   47.5 F   |   281.76 K
10.0 C   |   50.0 F   |   283.15 K
11.39 C   |   52.5 F   |   284.54 K
12.78 C   |   55.0 F   |   285.93 K
14.17 C   |   57.5 F   |   287.32 K
15.56 C   |   60.0 F   |   288.71 K
16.94 C   |   62.5 F   |   290.09 K
18.33 C   |   65.0 F   |   291.48 K
19.72 C   |   67.5 F   |   292.87 K
21.11 C   |   70.0 F   |   294.26 K
22.5 C   |   72.5 F   |   295.65 K
23.89 C   |   75.0 F   |   297.04 K
25.28 C   |   77.5 F   |   298.43 K
26.67 C   |   80.0 F   |   299.82 K
28.06 C   |   82.5 F   |   301.21 K
29.44 C   |   85.0 F   |   302.59 K
30.83 C   |   87.5 F   |   303.98 K
32.22 C   |   90.0 F   |   305.37 K
33.61 C   |   92.5 F   |   306.76 K
35.0 C   |   95.0 F   |   308.15 K
36.39 C   |   97.5 F   |   309.54 K
37.78 C   |   100.0 F   |   310.93 K
39.17 C   |   102.5 F   |   312.32 K
40.56 C   |   105.0 F   |   313.71 K
41.94 C   |   107.5 F   |   315.09 K
43.33 C   |   110.0 F   |   316.48 K
44.72 C   |   112.5 F   |   317.87 K
46.11 C   |   115.0 F   |   319.26 K
47.5 C   |   117.5 F   |   320.65 K
48.89 C   |   120.0 F   |   322.04 K
50.28 C   |   122.5 F   |   323.43 K
51.67 C   |   125.0 F   |   324.82 K
53.06 C   |   127.5 F   |   326.21 K
54.44 C   |   130.0 F   |   327.59 K
55.83 C   |   132.5 F   |   328.98 K
57.22 C   |   135.0 F   |   330.37 K
58.61 C   |   137.5 F   |   331.76 K
60.0 C   |   140.0 F   |   333.15 K
61.39 C   |   142.5 F   |   334.54 K
62.78 C   |   145.0 F   |   335.93 K
64.17 C   |   147.5 F   |   337.32 K
65.56 C   |   150.0 F   |   338.71 K
66.94 C   |   152.5 F   |   340.09 K
68.33 C   |   155.0 F   |   341.48 K
69.72 C   |   157.5 F   |   342.87 K
71.11 C   |   160.0 F   |   344.26 K
72.5 C   |   162.5 F   |   345.65 K
73.89 C   |   165.0 F   |   347.04 K
75.28 C   |   167.5 F   |   348.43 K
76.67 C   |   170.0 F   |   349.82 K
78.06 C   |   172.5 F   |   351.21 K
79.44 C   |   175.0 F   |   352.59 K
80.83 C   |   177.5 F   |   353.98 K
82.22 C   |   180.0 F   |   355.37 K
83.61 C   |   182.5 F   |   356.76 K
85.0 C   |   185.0 F   |   358.15 K
86.39 C   |   187.5 F   |   359.54 K
87.78 C   |   190.0 F   |   360.93 K
89.17 C   |   192.5 F   |   362.32 K
90.56 C   |   195.0 F   |   363.71 K
91.94 C   |   197.5 F   |   365.09 K
93.33 C   |   200.0 F   |   366.48 K
94.72 C   |   202.5 F   |   367.87 K
96.11 C   |   205.0 F   |   369.26 K
97.5 C   |   207.5 F   |   370.65 K
98.89 C   |   210.0 F   |   372.04 K
igc2@backus-naur:~/workspace/214/projects/08/ruby$ ruby temperature. Tester.rb
Testing Constructor... Passed!
Testing toFahrenheit... Passed!
Testing toCelsius... Passed!
Testing toKelvin... Passed!
Testing raiseTemp... Passed!
Testing lowerTemp... Passed!
Testing equalTo... Passed!
Testing lessThan... Passed!
Testing fromString and toString... 
Enter a Temperature value: -295 F
Temperature value fromString: -295.0 FAll Tests Passed!
Enter the base temperature: 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0
Celsius   |   Fahrenheit   |   Kelvin
-273.15 C   |   -459.67 F   |   0.0 K
-253.15 C   |   -423.67 F   |   20.0 K
-233.15 C   |   -387.67 F   |   40.0 K
-213.15 C   |   -351.67 F   |   60.0 K
-193.15 C   |   -315.67 F   |   80.0 K
-173.15 C   |   -279.67 F   |   100.0 K
-153.15 C   |   -243.67 F   |   120.0 K
-133.15 C   |   -207.67 F   |   140.0 K
-113.15 C   |   -171.67 F   |   160.0 K
-93.15 C   |   -135.67 F   |   180.0 K
-73.15 C   |   -99.67 F   |   200.0 K
-53.15 C   |   -63.67 F   |   220.0 K
-33.15 C   |   -27.67 F   |   240.0 K
-13.15 C   |   8.33 F   |   260.0 K
6.85 C   |   44.33 F   |   280.0 K
26.85 C   |   80.33 F   |   300.0 K
46.85 C   |   116.33 F   |   320.0 K
66.85 C   |   152.33 F   |   340.0 K
86.85 C   |   188.33 F   |   360.0 K
igc2@backus-naur:~/workspace/214/projects/08/ruby$ ls
script.ruby  Temperature.rb  temperatureTester.rb
igc2@backus-naur:~/workspace/214/projects/08/ruby$ exit

Script done on Tue 10 Apr 2018 03:11:42 PM EDT
